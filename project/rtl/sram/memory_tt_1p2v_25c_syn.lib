/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2019  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname memory -words 128 -bits 16 -frequency 100 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met1 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -libname USERLIB -corners ff_1p32v_m55c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   USERLIB
 *      Instance Name:  memory
 *      Words:          128
 *      Word Width:     16
 *      Mux:            2
 *      Corner:        tt_1p2v_25c
 *
 *      Creation Date:  2019-04-03 16:53:22Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2019-04-03 16:53:22Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2019 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 25.000;
	nom_voltage		: 1.200;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(tt_1p2v_25c) {
		process	 : 1;
		temperature	 : 25.000;
		voltage	 : 1.200;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : tt_1p2v_25c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(memory_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(memory_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(memory_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(memory_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(memory_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(memory_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(memory_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(memory_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(memory_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(memory_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(memory_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(memory_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (memory_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 16;
		bit_from : 15;
		bit_to : 0 ;
		downto : true ;
	}
	type (memory_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (memory_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 7;
		bit_from : 6;
		bit_to : 0 ;
		downto : true ;
	}
cell(memory) {
	area		 : 17624.106;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 7;
		word_width : 16;
	}
        bus(Q)   {
                bus_type : memory_DATA;
		direction : output;
		max_capacitance : 0.650;
                memory_read() {
			address : A;
		}
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(memory_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "1.653, 1.675, 1.696, 1.751, 1.893, 2.121, 2.361", \
                          "1.685, 1.707, 1.729, 1.783, 1.925, 2.154, 2.393", \
                          "1.725, 1.747, 1.769, 1.823, 1.965, 2.194, 2.433", \
                          "1.805, 1.827, 1.849, 1.903, 2.045, 2.274, 2.514", \
                          "2.046, 2.068, 2.090, 2.144, 2.286, 2.515, 2.755", \
                          "2.448, 2.469, 2.491, 2.546, 2.687, 2.916, 3.156", \
                          "2.849, 2.871, 2.893, 2.947, 3.089, 3.318, 3.557" \
                        )
                        }
                        rise_transition(memory_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.050, 0.102, 0.155, 0.285, 0.623, 1.170, 1.743")
                        }
                        cell_fall(memory_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "1.653, 1.675, 1.696, 1.751, 1.893, 2.121, 2.361", \
                          "1.685, 1.707, 1.729, 1.783, 1.925, 2.154, 2.393", \
                          "1.725, 1.747, 1.769, 1.823, 1.965, 2.194, 2.433", \
                          "1.805, 1.827, 1.849, 1.903, 2.045, 2.274, 2.514", \
                          "2.046, 2.068, 2.090, 2.144, 2.286, 2.515, 2.755", \
                          "2.448, 2.469, 2.491, 2.546, 2.687, 2.916, 3.156", \
                          "2.849, 2.871, 2.893, 2.947, 3.089, 3.318, 3.557" \
                        )
                        }
                        fall_transition(memory_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.055, 0.118, 0.181, 0.339, 0.749, 1.412, 2.107")
                        }
                }
        }
        pin(CLK)   {
		direction : input;
		capacitance : 0.057;
                clock : true;
                max_transition : 1.500;
                min_pulse_width_high : 0.355 ;
                min_pulse_width_low  : 0.585 ;
                min_period           : 3.236 ;


                internal_power(){
                        when : "(!CEN & ! \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(memory_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("11.803, 11.803")
                        }
                        fall_power(memory_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CEN & \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(memory_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("11.050, 11.050")
                        }
                        fall_power(memory_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CEN)";
                        rise_power(memory_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.053, 0.053")
                        }
                        fall_power(memory_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CEN)   {
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.560, 0.590, 0.629, 0.706, 0.936, 1.321, 1.705", \
                          "0.528, 0.558, 0.597, 0.674, 0.904, 1.289, 1.673", \
                          "0.487, 0.518, 0.557, 0.634, 0.864, 1.248, 1.633", \
                          "0.407, 0.438, 0.476, 0.553, 0.784, 1.168, 1.553", \
                          "0.166, 0.197, 0.235, 0.312, 0.543, 0.927, 1.312", \
                          "-0.235, -0.204, -0.166, -0.089, 0.142, 0.526, 0.910", \
                          "-0.637, -0.606, -0.567, -0.491, -0.260, 0.124, 0.509" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.642, 0.675, 0.717, 0.799, 1.048, 1.461, 1.875", \
                          "0.610, 0.643, 0.685, 0.767, 1.015, 1.429, 1.842", \
                          "0.570, 0.603, 0.645, 0.727, 0.975, 1.389, 1.802", \
                          "0.490, 0.523, 0.564, 0.647, 0.895, 1.309, 1.722", \
                          "0.249, 0.282, 0.323, 0.406, 0.654, 1.068, 1.481", \
                          "-0.153, -0.119, -0.078, 0.005, 0.253, 0.666, 1.080", \
                          "-0.554, -0.521, -0.480, -0.397, -0.149, 0.265, 0.678" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.058, 0.028, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.460, 0.429, 0.391, 0.314, 0.083, 0.000, 0.000", \
                          "0.861, 0.830, 0.792, 0.715, 0.485, 0.100, 0.000" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.370, 0.337, 0.295, 0.213, 0.000, 0.000, 0.000", \
                          "0.771, 0.738, 0.697, 0.614, 0.366, 0.000, 0.000" \
                        )
                        }
               }
        }
        pin(WEN){
                direction : input;
                capacitance : 0.018;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.452, 0.485, 0.525, 0.607, 0.852, 1.259, 1.667", \
                          "0.420, 0.452, 0.493, 0.575, 0.819, 1.227, 1.635", \
                          "0.380, 0.412, 0.453, 0.535, 0.779, 1.187, 1.595", \
                          "0.299, 0.332, 0.373, 0.454, 0.699, 1.107, 1.515", \
                          "0.059, 0.091, 0.132, 0.213, 0.458, 0.866, 1.274", \
                          "-0.343, -0.310, -0.270, -0.188, 0.057, 0.465, 0.872", \
                          "-0.744, -0.712, -0.671, -0.589, -0.345, 0.063, 0.471" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.549, 0.577, 0.612, 0.682, 0.892, 1.242, 1.591", \
                          "0.517, 0.545, 0.580, 0.650, 0.860, 1.210, 1.559", \
                          "0.477, 0.505, 0.540, 0.610, 0.820, 1.169, 1.519", \
                          "0.397, 0.425, 0.459, 0.529, 0.739, 1.089, 1.439", \
                          "0.156, 0.184, 0.219, 0.289, 0.498, 0.848, 1.198", \
                          "-0.246, -0.218, -0.183, -0.113, 0.097, 0.447, 0.797", \
                          "-0.647, -0.619, -0.584, -0.514, -0.304, 0.045, 0.395" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.070, 0.038, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.311, 0.279, 0.238, 0.156, 0.000, 0.000, 0.000", \
                          "0.713, 0.680, 0.639, 0.558, 0.313, 0.000, 0.000", \
                          "1.114, 1.082, 1.041, 0.959, 0.715, 0.307, 0.000" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.058, 0.030, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.299, 0.271, 0.236, 0.166, 0.000, 0.000, 0.000", \
                          "0.700, 0.672, 0.637, 0.568, 0.358, 0.008, 0.000", \
                          "1.102, 1.074, 1.039, 0.969, 0.759, 0.409, 0.060" \
                        )
                        }
               }
        }
        bus(A)   {
                bus_type : memory_ADDRESS;
                direction : input;
                capacitance : 0.013;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.757, 0.792, 0.836, 0.924, 1.187, 1.627, 2.066", \
                          "0.725, 0.760, 0.804, 0.892, 1.155, 1.595, 2.034", \
                          "0.685, 0.720, 0.764, 0.852, 1.115, 1.555, 1.994", \
                          "0.604, 0.639, 0.683, 0.771, 1.035, 1.474, 1.914", \
                          "0.363, 0.399, 0.443, 0.530, 0.794, 1.233, 1.673", \
                          "-0.038, -0.003, 0.041, 0.129, 0.393, 0.832, 1.271", \
                          "-0.439, -0.404, -0.360, -0.272, -0.009, 0.431, 0.870" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.256, 0.289, 0.329, 0.411, 0.656, 1.064, 1.471", \
                          "0.224, 0.257, 0.297, 0.379, 0.624, 1.031, 1.439", \
                          "0.184, 0.216, 0.257, 0.339, 0.583, 0.991, 1.399", \
                          "0.104, 0.136, 0.177, 0.259, 0.503, 0.911, 1.319", \
                          "-0.137, -0.105, -0.064, 0.018, 0.262, 0.670, 1.078", \
                          "-0.539, -0.506, -0.465, -0.384, -0.139, 0.269, 0.677", \
                          "-0.940, -0.908, -0.867, -0.785, -0.541, -0.133, 0.275" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.013, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.053, 0.018, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.134, 0.098, 0.054, 0.000, 0.000, 0.000, 0.000", \
                          "0.374, 0.339, 0.295, 0.207, 0.000, 0.000, 0.000", \
                          "0.776, 0.741, 0.697, 0.609, 0.345, 0.000, 0.000", \
                          "1.177, 1.142, 1.098, 1.010, 0.747, 0.307, 0.000" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.014, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.047, 0.014, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.087, 0.054, 0.013, 0.000, 0.000, 0.000, 0.000", \
                          "0.167, 0.134, 0.094, 0.012, 0.000, 0.000, 0.000", \
                          "0.408, 0.375, 0.334, 0.253, 0.008, 0.000, 0.000", \
                          "0.809, 0.777, 0.736, 0.654, 0.410, 0.002, 0.000", \
                          "1.211, 1.178, 1.137, 1.056, 0.811, 0.403, 0.000" \
                        )
                        }
               }
                internal_power(){
                        when : "CEN";
                        rise_power(memory_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.097, 0.097")
                        }
                        fall_power(memory_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.097, 0.097")
                        }
                }
        }
        bus(D)   {
                bus_type : memory_DATA;
                memory_write() {
                        address : A;
                        clocked_on : "CLK";
                }
                direction : input;
                capacitance : 0.003;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.285, 0.318, 0.360, 0.443, 0.692, 1.107, 1.523", \
                          "0.253, 0.286, 0.328, 0.411, 0.660, 1.075, 1.490", \
                          "0.213, 0.246, 0.288, 0.371, 0.620, 1.035, 1.450", \
                          "0.133, 0.166, 0.207, 0.290, 0.540, 0.955, 1.370", \
                          "-0.108, -0.075, -0.033, 0.050, 0.299, 0.714, 1.129", \
                          "-0.510, -0.476, -0.435, -0.352, -0.103, 0.313, 0.728", \
                          "-0.911, -0.878, -0.836, -0.753, -0.504, -0.089, 0.326" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.390, 0.423, 0.464, 0.545, 0.789, 1.196, 1.602", \
                          "0.358, 0.391, 0.431, 0.513, 0.757, 1.163, 1.570", \
                          "0.318, 0.351, 0.391, 0.473, 0.717, 1.123, 1.530", \
                          "0.238, 0.270, 0.311, 0.392, 0.636, 1.043, 1.450", \
                          "-0.003, 0.029, 0.070, 0.151, 0.395, 0.802, 1.209", \
                          "-0.405, -0.372, -0.331, -0.250, -0.006, 0.401, 0.807", \
                          "-0.806, -0.773, -0.733, -0.651, -0.407, -0.001, 0.406" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.031, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.071, 0.038, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.152, 0.118, 0.077, 0.000, 0.000, 0.000, 0.000", \
                          "0.392, 0.359, 0.318, 0.235, 0.000, 0.000, 0.000", \
                          "0.794, 0.761, 0.719, 0.636, 0.387, 0.000, 0.000", \
                          "1.195, 1.162, 1.121, 1.038, 0.788, 0.373, 0.000" \
                        )
                        }
                        fall_constraint(memory_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.223, 0.190, 0.149, 0.068, 0.000, 0.000, 0.000", \
                          "0.624, 0.591, 0.551, 0.469, 0.225, 0.000, 0.000", \
                          "1.025, 0.993, 0.952, 0.871, 0.627, 0.220, 0.000" \
                        )
                        }
               }
        }

        cell_leakage_power : 4.68E-5;
}
}
