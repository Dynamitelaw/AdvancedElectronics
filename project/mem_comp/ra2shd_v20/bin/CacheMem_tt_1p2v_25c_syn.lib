/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2019  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Dual Port SRAM Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2009Q1V1
 *      comment:		
 *      configuration:	 -instname CacheMem -words 256 -bits 6 -frequency 1 -ring_width 4.0 -mux 8 -write_mask off -wp_size 8 -top_layer "met5-8" -power_type rings -horiz met1 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 6 -dpccm on -asvm on -libname USERLIB -corners ff_1p32v_m40c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_125c
 *
 *      Synopsys model for Synchronous Dual-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  CacheMem
 *      Words:          256
 *      Word Width:     6
 *      Mux:            8
 *      Corner:        tt_1p2v_25c
 *
 *      Creation Date:  2019-04-26 05:34:12Z
 *      Version:        2009Q1V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2019-04-26 05:34:12Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2019 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 25.000;
	nom_voltage		: 1.200;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.000;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(tt_1p2v_25c) {
		process	 : 1;
		temperature	 : 25.000;
		voltage	 : 1.200;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : tt_1p2v_25c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(CacheMem_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(CacheMem_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(CacheMem_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(CacheMem_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(CacheMem_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(CacheMem_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(CacheMem_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(CacheMem_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (CacheMem_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 6;
		bit_from : 5;
		bit_to : 0 ;
		downto : true ;
	}
	type (CacheMem_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (CacheMem_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
cell(CacheMem) {
	area		 : 41173.920;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 8;
		word_width : 6;
	}
        bus(QA)   {
                bus_type : CacheMem_DATA;
		direction : output;
		max_capacitance : 0.860;
                memory_read() {
			address : AA;
		}
                timing() {
                        related_pin :   "CLKA" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "2.402, 2.446, 2.491, 2.579, 2.775, 3.063, 3.373", \
                          "2.416, 2.460, 2.505, 2.593, 2.789, 3.077, 3.387", \
                          "2.433, 2.478, 2.522, 2.611, 2.806, 3.095, 3.404", \
                          "2.469, 2.513, 2.557, 2.646, 2.842, 3.130, 3.439", \
                          "2.539, 2.583, 2.627, 2.716, 2.912, 3.200, 3.509", \
                          "2.679, 2.724, 2.768, 2.857, 3.052, 3.341, 3.650", \
                          "2.749, 2.794, 2.838, 2.927, 3.122, 3.411, 3.720" \
                        )
                        }
                        rise_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.048, 0.133, 0.219, 0.390, 0.845, 1.643, 2.498")
                        }
                        cell_fall(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "2.402, 2.446, 2.491, 2.579, 2.775, 3.063, 3.373", \
                          "2.416, 2.460, 2.505, 2.593, 2.789, 3.077, 3.387", \
                          "2.433, 2.478, 2.522, 2.611, 2.806, 3.095, 3.404", \
                          "2.469, 2.513, 2.557, 2.646, 2.842, 3.130, 3.439", \
                          "2.539, 2.583, 2.627, 2.716, 2.912, 3.200, 3.509", \
                          "2.679, 2.724, 2.768, 2.857, 3.052, 3.341, 3.650", \
                          "2.749, 2.794, 2.838, 2.927, 3.122, 3.411, 3.720" \
                        )
                        }
                        fall_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.059, 0.118, 0.177, 0.295, 0.610, 1.161, 1.752")
                        }
                }
        }
        bus(QB)   {
                bus_type : CacheMem_DATA;
		direction : output;
		max_capacitance : 0.860;
                memory_read() {
			address : AB;
		}
                timing() {
                        related_pin :   "CLKB" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "2.402, 2.446, 2.491, 2.579, 2.775, 3.063, 3.373", \
                          "2.416, 2.460, 2.505, 2.593, 2.789, 3.077, 3.387", \
                          "2.433, 2.478, 2.522, 2.611, 2.806, 3.095, 3.404", \
                          "2.469, 2.513, 2.557, 2.646, 2.842, 3.130, 3.439", \
                          "2.539, 2.583, 2.627, 2.716, 2.912, 3.200, 3.509", \
                          "2.679, 2.724, 2.768, 2.857, 3.052, 3.341, 3.650", \
                          "2.749, 2.794, 2.838, 2.927, 3.122, 3.411, 3.720" \
                        )
                        }
                        rise_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.048, 0.133, 0.219, 0.390, 0.845, 1.643, 2.498")
                        }
                        cell_fall(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "2.402, 2.446, 2.491, 2.579, 2.775, 3.063, 3.373", \
                          "2.416, 2.460, 2.505, 2.593, 2.789, 3.077, 3.387", \
                          "2.433, 2.478, 2.522, 2.611, 2.806, 3.095, 3.404", \
                          "2.469, 2.513, 2.557, 2.646, 2.842, 3.130, 3.439", \
                          "2.539, 2.583, 2.627, 2.716, 2.912, 3.200, 3.509", \
                          "2.679, 2.724, 2.768, 2.857, 3.052, 3.341, 3.650", \
                          "2.749, 2.794, 2.838, 2.927, 3.122, 3.411, 3.720" \
                        )
                        }
                        fall_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.059, 0.118, 0.177, 0.295, 0.610, 1.161, 1.752")
                        }
                }
        }
        pin(CLKA)   {
		direction : input;
		capacitance : 0.131;
                clock : true;
                max_transition : 1.000;
                timing() {
                        related_pin     : "CLKB" ;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918", \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918", \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918", \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918", \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918", \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918", \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918" \
                        )
                        }
                 }
                min_pulse_width_high : 0.196 ;
                min_pulse_width_low  : 0.319 ;
                min_period           : 2.845 ;


                internal_power(){
                        when : "(!CENA & ! \
                                 (WENA) \
                                ) \
                                 ";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("19.311, 19.311")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CENA & \
                                 (WENA) \
                                ) \
                                 ";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("16.266, 16.266")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CENA)";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.013, 0.013")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CENA)   {
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLKA;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.188, 1.200, 1.214, 1.243, 1.301, 1.416, 1.474", \
                          "1.174, 1.186, 1.200, 1.229, 1.287, 1.402, 1.460", \
                          "1.156, 1.168, 1.182, 1.211, 1.269, 1.385, 1.442", \
                          "1.121, 1.133, 1.147, 1.176, 1.234, 1.349, 1.407", \
                          "1.051, 1.063, 1.077, 1.106, 1.164, 1.279, 1.337", \
                          "0.911, 0.922, 0.937, 0.966, 1.023, 1.139, 1.197", \
                          "0.840, 0.852, 0.866, 0.895, 0.953, 1.069, 1.126" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.047, 1.056, 1.068, 1.090, 1.135, 1.225, 1.270", \
                          "1.033, 1.042, 1.053, 1.076, 1.121, 1.211, 1.256", \
                          "1.016, 1.025, 1.036, 1.058, 1.104, 1.194, 1.239", \
                          "0.981, 0.990, 1.001, 1.023, 1.068, 1.159, 1.204", \
                          "0.910, 0.919, 0.931, 0.953, 0.998, 1.088, 1.133", \
                          "0.770, 0.779, 0.790, 0.813, 0.858, 0.948, 0.993", \
                          "0.700, 0.709, 0.720, 0.743, 0.788, 0.878, 0.923" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKA;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.534, 0.523, 0.508, 0.479, 0.450, 0.450, 0.450", \
                          "0.604, 0.593, 0.578, 0.550, 0.492, 0.450, 0.450" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
               }
        }
        pin(WENA){
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLKA;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.212, 1.225, 1.242, 1.274, 1.339, 1.470, 1.535", \
                          "1.198, 1.211, 1.228, 1.260, 1.325, 1.456, 1.521", \
                          "1.181, 1.194, 1.210, 1.243, 1.308, 1.438, 1.503", \
                          "1.146, 1.159, 1.175, 1.208, 1.273, 1.403, 1.468", \
                          "1.076, 1.089, 1.105, 1.137, 1.203, 1.333, 1.398", \
                          "0.935, 0.948, 0.964, 0.997, 1.062, 1.192, 1.258", \
                          "0.865, 0.878, 0.894, 0.927, 0.992, 1.122, 1.187" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.244, 1.253, 1.266, 1.290, 1.339, 1.436, 1.485", \
                          "1.230, 1.239, 1.252, 1.276, 1.325, 1.422, 1.471", \
                          "1.212, 1.222, 1.234, 1.258, 1.307, 1.405, 1.453", \
                          "1.177, 1.187, 1.199, 1.223, 1.272, 1.369, 1.418", \
                          "1.107, 1.117, 1.129, 1.153, 1.202, 1.299, 1.348", \
                          "0.966, 0.976, 0.988, 1.013, 1.061, 1.159, 1.208", \
                          "0.896, 0.906, 0.918, 0.942, 0.991, 1.089, 1.137" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKA;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
               }
        }
        bus(AA)   {
                bus_type : CacheMem_ADDRESS;
                direction : input;
                capacitance : 0.017;
                timing() {
                        related_pin     : CLKA;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.931, 0.939, 0.949, 0.968, 1.007, 1.084, 1.123", \
                          "0.917, 0.925, 0.935, 0.954, 0.993, 1.070, 1.109", \
                          "0.900, 0.908, 0.917, 0.937, 0.975, 1.053, 1.092", \
                          "0.865, 0.873, 0.882, 0.902, 0.940, 1.018, 1.057", \
                          "0.795, 0.802, 0.812, 0.831, 0.870, 0.948, 0.986", \
                          "0.654, 0.662, 0.672, 0.691, 0.730, 0.807, 0.846", \
                          "0.584, 0.592, 0.601, 0.621, 0.659, 0.737, 0.776" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.623, 0.631, 0.640, 0.659, 0.697, 0.772, 0.810", \
                          "0.609, 0.617, 0.626, 0.645, 0.683, 0.758, 0.796", \
                          "0.592, 0.599, 0.608, 0.627, 0.665, 0.740, 0.778", \
                          "0.556, 0.564, 0.573, 0.592, 0.630, 0.705, 0.743", \
                          "0.486, 0.494, 0.503, 0.522, 0.560, 0.635, 0.673", \
                          "0.346, 0.353, 0.363, 0.382, 0.419, 0.495, 0.532", \
                          "0.276, 0.283, 0.293, 0.311, 0.349, 0.424, 0.462" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKA;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.305, 0.298, 0.288, 0.269, 0.230, 0.220, 0.220", \
                          "0.376, 0.368, 0.358, 0.339, 0.300, 0.223, 0.220" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.283, 0.276, 0.266, 0.247, 0.220, 0.220, 0.220", \
                          "0.424, 0.416, 0.407, 0.388, 0.350, 0.275, 0.237", \
                          "0.494, 0.486, 0.477, 0.458, 0.420, 0.345, 0.307" \
                        )
                        }
               }
                internal_power(){
                        when : "CENA";
                        rise_power(CacheMem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.228, 0.228")
                        }
                        fall_power(CacheMem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.228, 0.228")
                        }
                }
        }
        bus(DA)   {
                bus_type : CacheMem_DATA;
                memory_write() {
                        address : AA;
                        clocked_on : "CLKA";
                }
                direction : input;
                capacitance : 0.001;
                timing() {
                        related_pin     : CLKA;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.839, 0.846, 0.855, 0.872, 0.906, 0.973, 1.007", \
                          "0.825, 0.832, 0.841, 0.858, 0.892, 0.959, 0.993", \
                          "0.808, 0.815, 0.823, 0.840, 0.874, 0.942, 0.976", \
                          "0.773, 0.780, 0.788, 0.805, 0.839, 0.907, 0.941", \
                          "0.703, 0.709, 0.718, 0.735, 0.769, 0.837, 0.870", \
                          "0.562, 0.569, 0.577, 0.594, 0.628, 0.696, 0.730", \
                          "0.492, 0.499, 0.507, 0.524, 0.558, 0.626, 0.660" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.964, 0.975, 0.989, 1.017, 1.072, 1.184, 1.239", \
                          "0.950, 0.961, 0.975, 1.003, 1.058, 1.169, 1.225", \
                          "0.932, 0.943, 0.957, 0.985, 1.041, 1.152, 1.208", \
                          "0.897, 0.908, 0.922, 0.950, 1.006, 1.117, 1.172", \
                          "0.827, 0.838, 0.852, 0.880, 0.935, 1.047, 1.102", \
                          "0.686, 0.698, 0.711, 0.739, 0.795, 0.906, 0.962", \
                          "0.616, 0.627, 0.641, 0.669, 0.725, 0.836, 0.892" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKA;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.477, 0.470, 0.462, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.548, 0.536, 0.523, 0.495, 0.450, 0.450, 0.450", \
                          "0.618, 0.607, 0.593, 0.565, 0.509, 0.450, 0.450" \
                        )
                        }
               }
        }
        pin(CLKB)   {
		direction : input;
		capacitance : 0.131;
                clock : true;
                max_transition : 1.000;
                timing() {
                        related_pin     : "CLKA" ;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918", \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918", \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918", \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918", \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918", \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918", \
                          "1.918, 1.918, 1.918, 1.918, 1.918, 1.918, 1.918" \
                        )
                        }
                 }
                min_pulse_width_high : 0.196 ;
                min_pulse_width_low  : 0.319 ;
                min_period           : 2.845 ;


                internal_power(){
                        when : "(!CENB & ! \
                                 (WENB) \
                                ) \
                                 ";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("19.311, 19.311")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CENB & \
                                 (WENB) \
                                ) \
                                 ";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("16.266, 16.266")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CENB)";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.013, 0.013")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CENB)   {
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLKB;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.188, 1.200, 1.214, 1.243, 1.301, 1.416, 1.474", \
                          "1.174, 1.186, 1.200, 1.229, 1.287, 1.402, 1.460", \
                          "1.156, 1.168, 1.182, 1.211, 1.269, 1.385, 1.442", \
                          "1.121, 1.133, 1.147, 1.176, 1.234, 1.349, 1.407", \
                          "1.051, 1.063, 1.077, 1.106, 1.164, 1.279, 1.337", \
                          "0.911, 0.922, 0.937, 0.966, 1.023, 1.139, 1.197", \
                          "0.840, 0.852, 0.866, 0.895, 0.953, 1.069, 1.126" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.047, 1.056, 1.068, 1.090, 1.135, 1.225, 1.270", \
                          "1.033, 1.042, 1.053, 1.076, 1.121, 1.211, 1.256", \
                          "1.016, 1.025, 1.036, 1.058, 1.104, 1.194, 1.239", \
                          "0.981, 0.990, 1.001, 1.023, 1.068, 1.159, 1.204", \
                          "0.910, 0.919, 0.931, 0.953, 0.998, 1.088, 1.133", \
                          "0.770, 0.779, 0.790, 0.813, 0.858, 0.948, 0.993", \
                          "0.700, 0.709, 0.720, 0.743, 0.788, 0.878, 0.923" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKB;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.534, 0.523, 0.508, 0.479, 0.450, 0.450, 0.450", \
                          "0.604, 0.593, 0.578, 0.550, 0.492, 0.450, 0.450" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
               }
        }
        pin(WENB){
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLKB;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.212, 1.225, 1.242, 1.274, 1.339, 1.470, 1.535", \
                          "1.198, 1.211, 1.228, 1.260, 1.325, 1.456, 1.521", \
                          "1.181, 1.194, 1.210, 1.243, 1.308, 1.438, 1.503", \
                          "1.146, 1.159, 1.175, 1.208, 1.273, 1.403, 1.468", \
                          "1.076, 1.089, 1.105, 1.137, 1.203, 1.333, 1.398", \
                          "0.935, 0.948, 0.964, 0.997, 1.062, 1.192, 1.258", \
                          "0.865, 0.878, 0.894, 0.927, 0.992, 1.122, 1.187" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.244, 1.253, 1.266, 1.290, 1.339, 1.436, 1.485", \
                          "1.230, 1.239, 1.252, 1.276, 1.325, 1.422, 1.471", \
                          "1.212, 1.222, 1.234, 1.258, 1.307, 1.405, 1.453", \
                          "1.177, 1.187, 1.199, 1.223, 1.272, 1.369, 1.418", \
                          "1.107, 1.117, 1.129, 1.153, 1.202, 1.299, 1.348", \
                          "0.966, 0.976, 0.988, 1.013, 1.061, 1.159, 1.208", \
                          "0.896, 0.906, 0.918, 0.942, 0.991, 1.089, 1.137" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKB;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
               }
        }
        bus(AB)   {
                bus_type : CacheMem_ADDRESS;
                direction : input;
                capacitance : 0.017;
                timing() {
                        related_pin     : CLKB;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.931, 0.939, 0.949, 0.968, 1.007, 1.084, 1.123", \
                          "0.917, 0.925, 0.935, 0.954, 0.993, 1.070, 1.109", \
                          "0.900, 0.908, 0.917, 0.937, 0.975, 1.053, 1.092", \
                          "0.865, 0.873, 0.882, 0.902, 0.940, 1.018, 1.057", \
                          "0.795, 0.802, 0.812, 0.831, 0.870, 0.948, 0.986", \
                          "0.654, 0.662, 0.672, 0.691, 0.730, 0.807, 0.846", \
                          "0.584, 0.592, 0.601, 0.621, 0.659, 0.737, 0.776" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.623, 0.631, 0.640, 0.659, 0.697, 0.772, 0.810", \
                          "0.609, 0.617, 0.626, 0.645, 0.683, 0.758, 0.796", \
                          "0.592, 0.599, 0.608, 0.627, 0.665, 0.740, 0.778", \
                          "0.556, 0.564, 0.573, 0.592, 0.630, 0.705, 0.743", \
                          "0.486, 0.494, 0.503, 0.522, 0.560, 0.635, 0.673", \
                          "0.346, 0.353, 0.363, 0.382, 0.419, 0.495, 0.532", \
                          "0.276, 0.283, 0.293, 0.311, 0.349, 0.424, 0.462" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKB;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.305, 0.298, 0.288, 0.269, 0.230, 0.220, 0.220", \
                          "0.376, 0.368, 0.358, 0.339, 0.300, 0.223, 0.220" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.283, 0.276, 0.266, 0.247, 0.220, 0.220, 0.220", \
                          "0.424, 0.416, 0.407, 0.388, 0.350, 0.275, 0.237", \
                          "0.494, 0.486, 0.477, 0.458, 0.420, 0.345, 0.307" \
                        )
                        }
               }
                internal_power(){
                        when : "CENB";
                        rise_power(CacheMem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.228, 0.228")
                        }
                        fall_power(CacheMem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.228, 0.228")
                        }
                }
        }
        bus(DB)   {
                bus_type : CacheMem_DATA;
                memory_write() {
                        address : AB;
                        clocked_on : "CLKB";
                }
                direction : input;
                capacitance : 0.001;
                timing() {
                        related_pin     : CLKB;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.839, 0.846, 0.855, 0.872, 0.906, 0.973, 1.007", \
                          "0.825, 0.832, 0.841, 0.858, 0.892, 0.959, 0.993", \
                          "0.808, 0.815, 0.823, 0.840, 0.874, 0.942, 0.976", \
                          "0.773, 0.780, 0.788, 0.805, 0.839, 0.907, 0.941", \
                          "0.703, 0.709, 0.718, 0.735, 0.769, 0.837, 0.870", \
                          "0.562, 0.569, 0.577, 0.594, 0.628, 0.696, 0.730", \
                          "0.492, 0.499, 0.507, 0.524, 0.558, 0.626, 0.660" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.964, 0.975, 0.989, 1.017, 1.072, 1.184, 1.239", \
                          "0.950, 0.961, 0.975, 1.003, 1.058, 1.169, 1.225", \
                          "0.932, 0.943, 0.957, 0.985, 1.041, 1.152, 1.208", \
                          "0.897, 0.908, 0.922, 0.950, 1.006, 1.117, 1.172", \
                          "0.827, 0.838, 0.852, 0.880, 0.935, 1.047, 1.102", \
                          "0.686, 0.698, 0.711, 0.739, 0.795, 0.906, 0.962", \
                          "0.616, 0.627, 0.641, 0.669, 0.725, 0.836, 0.892" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKB;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.477, 0.470, 0.462, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.548, 0.536, 0.523, 0.495, 0.450, 0.450, 0.450", \
                          "0.618, 0.607, 0.593, 0.565, 0.509, 0.450, 0.450" \
                        )
                        }
               }
        }

        cell_leakage_power : 4.79E-4;
}
}
