/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2019  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Dual Port SRAM Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2009Q1V1
 *      comment:		
 *      configuration:	 -instname CacheMem -words 256 -bits 6 -frequency 1 -ring_width 4.0 -mux 8 -write_mask off -wp_size 8 -top_layer "met5-8" -power_type rings -horiz met1 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 6 -dpccm on -asvm on -libname USERLIB -corners ff_1p32v_m40c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_125c
 *
 *      Synopsys model for Synchronous Dual-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  CacheMem
 *      Words:          256
 *      Word Width:     6
 *      Mux:            8
 *      Corner:        ss_1p08v_125c
 *
 *      Creation Date:  2019-04-26 05:34:12Z
 *      Version:        2009Q1V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2019-04-26 05:34:12Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2019 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 125.000;
	nom_voltage		: 1.080;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(ss_1p08v_125c) {
		process	 : 1;
		temperature	 : 125.000;
		voltage	 : 1.080;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : ss_1p08v_125c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(CacheMem_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(CacheMem_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(CacheMem_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(CacheMem_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(CacheMem_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(CacheMem_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(CacheMem_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(CacheMem_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (CacheMem_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 6;
		bit_from : 5;
		bit_to : 0 ;
		downto : true ;
	}
	type (CacheMem_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (CacheMem_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
cell(CacheMem) {
	area		 : 41173.920;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 8;
		word_width : 6;
	}
        bus(QA)   {
                bus_type : CacheMem_DATA;
		direction : output;
		max_capacitance : 0.860;
                memory_read() {
			address : AA;
		}
                timing() {
                        related_pin :   "CLKA" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "6.182, 6.265, 6.348, 6.515, 6.959, 7.736, 8.568", \
                          "6.198, 6.281, 6.364, 6.531, 6.975, 7.752, 8.584", \
                          "6.218, 6.301, 6.384, 6.551, 6.995, 7.772, 8.604", \
                          "6.257, 6.341, 6.424, 6.590, 7.034, 7.811, 8.644", \
                          "6.377, 6.460, 6.543, 6.710, 7.154, 7.930, 8.763", \
                          "6.575, 6.659, 6.742, 6.908, 7.352, 8.129, 8.961", \
                          "6.774, 6.857, 6.940, 7.107, 7.551, 8.328, 9.160" \
                        )
                        }
                        rise_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.103, 0.260, 0.418, 0.734, 1.576, 3.049, 4.627")
                        }
                        cell_fall(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "6.399, 6.459, 6.519, 6.639, 6.958, 7.517, 8.115", \
                          "6.415, 6.475, 6.535, 6.655, 6.974, 7.533, 8.131", \
                          "6.435, 6.495, 6.555, 6.674, 6.994, 7.552, 8.151", \
                          "6.475, 6.535, 6.594, 6.714, 7.033, 7.592, 8.191", \
                          "6.594, 6.654, 6.714, 6.833, 7.153, 7.711, 8.310", \
                          "6.792, 6.852, 6.912, 7.032, 7.351, 7.910, 8.509", \
                          "6.991, 7.051, 7.111, 7.231, 7.550, 8.109, 8.707" \
                        )
                        }
                        fall_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.134, 0.248, 0.363, 0.591, 1.201, 2.268, 3.411")
                        }
                }
        }
        bus(QB)   {
                bus_type : CacheMem_DATA;
		direction : output;
		max_capacitance : 0.860;
                memory_read() {
			address : AB;
		}
                timing() {
                        related_pin :   "CLKB" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "6.182, 6.265, 6.348, 6.515, 6.959, 7.736, 8.568", \
                          "6.198, 6.281, 6.364, 6.531, 6.975, 7.752, 8.584", \
                          "6.218, 6.301, 6.384, 6.551, 6.995, 7.772, 8.604", \
                          "6.257, 6.341, 6.424, 6.590, 7.034, 7.811, 8.644", \
                          "6.377, 6.460, 6.543, 6.710, 7.154, 7.930, 8.763", \
                          "6.575, 6.659, 6.742, 6.908, 7.352, 8.129, 8.961", \
                          "6.774, 6.857, 6.940, 7.107, 7.551, 8.328, 9.160" \
                        )
                        }
                        rise_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.103, 0.260, 0.418, 0.734, 1.576, 3.049, 4.627")
                        }
                        cell_fall(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "6.399, 6.459, 6.519, 6.639, 6.958, 7.517, 8.115", \
                          "6.415, 6.475, 6.535, 6.655, 6.974, 7.533, 8.131", \
                          "6.435, 6.495, 6.555, 6.674, 6.994, 7.552, 8.151", \
                          "6.475, 6.535, 6.594, 6.714, 7.033, 7.592, 8.191", \
                          "6.594, 6.654, 6.714, 6.833, 7.153, 7.711, 8.310", \
                          "6.792, 6.852, 6.912, 7.032, 7.351, 7.910, 8.509", \
                          "6.991, 7.051, 7.111, 7.231, 7.550, 8.109, 8.707" \
                        )
                        }
                        fall_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.134, 0.248, 0.363, 0.591, 1.201, 2.268, 3.411")
                        }
                }
        }
        pin(CLKA)   {
		direction : input;
		capacitance : 0.133;
                clock : true;
                max_transition : 1.500;
                timing() {
                        related_pin     : "CLKB" ;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037", \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037", \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037", \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037", \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037", \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037", \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037" \
                        )
                        }
                 }
                min_pulse_width_high : 0.422 ;
                min_pulse_width_low  : 0.700 ;
                min_period           : 5.868 ;


                internal_power(){
                        when : "(!CENA & ! \
                                 (WENA) \
                                ) \
                                 ";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("30.128, 30.128")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CENA & \
                                 (WENA) \
                                ) \
                                 ";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("14.215, 14.215")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CENA)";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.013, 0.013")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CENA)   {
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLKA;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "2.140, 2.156, 2.176, 2.216, 2.335, 2.534, 2.733", \
                          "2.124, 2.140, 2.160, 2.200, 2.319, 2.518, 2.718", \
                          "2.104, 2.120, 2.140, 2.180, 2.300, 2.499, 2.698", \
                          "2.065, 2.081, 2.101, 2.140, 2.260, 2.459, 2.658", \
                          "1.945, 1.961, 1.981, 2.021, 2.141, 2.340, 2.539", \
                          "1.747, 1.763, 1.783, 1.823, 1.942, 2.141, 2.340", \
                          "1.548, 1.564, 1.584, 1.624, 1.743, 1.943, 2.142" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.866, 1.879, 1.895, 1.927, 2.022, 2.182, 2.341", \
                          "1.851, 1.863, 1.879, 1.911, 2.007, 2.166, 2.325", \
                          "1.831, 1.843, 1.859, 1.891, 1.987, 2.146, 2.305", \
                          "1.791, 1.804, 1.820, 1.851, 1.947, 2.106, 2.265", \
                          "1.672, 1.685, 1.700, 1.732, 1.828, 1.987, 2.146", \
                          "1.473, 1.486, 1.502, 1.534, 1.629, 1.788, 1.947", \
                          "1.275, 1.287, 1.303, 1.335, 1.431, 1.590, 1.749" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKA;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.617, 0.601, 0.582, 0.542, 0.500, 0.500, 0.500" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500" \
                        )
                        }
               }
        }
        pin(WENA){
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLKA;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "2.304, 2.321, 2.343, 2.385, 2.513, 2.727, 2.940", \
                          "2.288, 2.305, 2.327, 2.369, 2.498, 2.711, 2.924", \
                          "2.269, 2.286, 2.307, 2.350, 2.478, 2.691, 2.904", \
                          "2.229, 2.246, 2.267, 2.310, 2.438, 2.651, 2.865", \
                          "2.110, 2.127, 2.148, 2.191, 2.319, 2.532, 2.746", \
                          "1.911, 1.928, 1.949, 1.992, 2.120, 2.334, 2.547", \
                          "1.712, 1.729, 1.751, 1.794, 1.922, 2.135, 2.348" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "2.301, 2.314, 2.331, 2.364, 2.465, 2.632, 2.800", \
                          "2.285, 2.298, 2.315, 2.349, 2.449, 2.616, 2.784", \
                          "2.265, 2.279, 2.295, 2.329, 2.429, 2.597, 2.764", \
                          "2.225, 2.239, 2.256, 2.289, 2.389, 2.557, 2.724", \
                          "2.106, 2.120, 2.136, 2.170, 2.270, 2.438, 2.605", \
                          "1.908, 1.921, 1.938, 1.971, 2.072, 2.239, 2.406", \
                          "1.709, 1.722, 1.739, 1.773, 1.873, 2.040, 2.208" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKA;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630" \
                        )
                        }
               }
        }
        bus(AA)   {
                bus_type : CacheMem_ADDRESS;
                direction : input;
                capacitance : 0.017;
                timing() {
                        related_pin     : CLKA;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.850, 1.862, 1.877, 1.907, 1.997, 2.147, 2.297", \
                          "1.834, 1.846, 1.861, 1.891, 1.981, 2.131, 2.281", \
                          "1.814, 1.826, 1.841, 1.871, 1.961, 2.111, 2.261", \
                          "1.774, 1.786, 1.801, 1.831, 1.921, 2.071, 2.221", \
                          "1.655, 1.667, 1.682, 1.712, 1.802, 1.952, 2.102", \
                          "1.456, 1.468, 1.483, 1.513, 1.603, 1.754, 1.904", \
                          "1.258, 1.270, 1.285, 1.315, 1.405, 1.555, 1.705" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.026, 1.037, 1.051, 1.079, 1.163, 1.303, 1.444", \
                          "1.010, 1.021, 1.035, 1.063, 1.147, 1.287, 1.428", \
                          "0.990, 1.001, 1.015, 1.043, 1.127, 1.268, 1.408", \
                          "0.950, 0.961, 0.975, 1.003, 1.088, 1.228, 1.368", \
                          "0.831, 0.842, 0.856, 0.884, 0.968, 1.109, 1.249", \
                          "0.632, 0.644, 0.658, 0.686, 0.770, 0.910, 1.050", \
                          "0.434, 0.445, 0.459, 0.487, 0.571, 0.711, 0.852" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKA;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.415, 0.403, 0.388, 0.358, 0.268, 0.230, 0.230" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.273, 0.261, 0.247, 0.230, 0.230, 0.230, 0.230", \
                          "0.471, 0.460, 0.446, 0.418, 0.334, 0.230, 0.230", \
                          "0.670, 0.659, 0.644, 0.616, 0.532, 0.392, 0.252" \
                        )
                        }
               }
                internal_power(){
                        when : "CENA";
                        rise_power(CacheMem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.216, 0.216")
                        }
                        fall_power(CacheMem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.216, 0.216")
                        }
                }
        }
        bus(DA)   {
                bus_type : CacheMem_DATA;
                memory_write() {
                        address : AA;
                        clocked_on : "CLKA";
                }
                direction : input;
                capacitance : 0.001;
                timing() {
                        related_pin     : CLKA;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.564, 1.578, 1.594, 1.627, 1.726, 1.892, 2.057", \
                          "1.548, 1.562, 1.578, 1.611, 1.711, 1.876, 2.041", \
                          "1.529, 1.542, 1.558, 1.591, 1.691, 1.856, 2.022", \
                          "1.489, 1.502, 1.519, 1.552, 1.651, 1.816, 1.982", \
                          "1.370, 1.383, 1.399, 1.433, 1.532, 1.697, 1.863", \
                          "1.171, 1.184, 1.201, 1.234, 1.333, 1.499, 1.664", \
                          "0.972, 0.986, 1.002, 1.035, 1.135, 1.300, 1.465" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.815, 1.830, 1.848, 1.885, 1.995, 2.178, 2.362", \
                          "1.799, 1.814, 1.832, 1.869, 1.979, 2.162, 2.346", \
                          "1.779, 1.794, 1.812, 1.849, 1.959, 2.143, 2.326", \
                          "1.740, 1.754, 1.773, 1.809, 1.919, 2.103, 2.286", \
                          "1.620, 1.635, 1.653, 1.690, 1.800, 1.984, 2.167", \
                          "1.422, 1.436, 1.455, 1.491, 1.602, 1.785, 1.969", \
                          "1.223, 1.238, 1.256, 1.293, 1.403, 1.586, 1.770" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKA;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.755, 0.740, 0.722, 0.685, 0.630, 0.630, 0.630" \
                        )
                        }
               }
        }
        pin(CLKB)   {
		direction : input;
		capacitance : 0.133;
                clock : true;
                max_transition : 1.500;
                timing() {
                        related_pin     : "CLKA" ;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037", \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037", \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037", \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037", \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037", \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037", \
                          "4.037, 4.037, 4.037, 4.037, 4.037, 4.037, 4.037" \
                        )
                        }
                 }
                min_pulse_width_high : 0.422 ;
                min_pulse_width_low  : 0.700 ;
                min_period           : 5.868 ;


                internal_power(){
                        when : "(!CENB & ! \
                                 (WENB) \
                                ) \
                                 ";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("30.128, 30.128")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CENB & \
                                 (WENB) \
                                ) \
                                 ";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("14.215, 14.215")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CENB)";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.013, 0.013")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CENB)   {
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLKB;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "2.140, 2.156, 2.176, 2.216, 2.335, 2.534, 2.733", \
                          "2.124, 2.140, 2.160, 2.200, 2.319, 2.518, 2.718", \
                          "2.104, 2.120, 2.140, 2.180, 2.300, 2.499, 2.698", \
                          "2.065, 2.081, 2.101, 2.140, 2.260, 2.459, 2.658", \
                          "1.945, 1.961, 1.981, 2.021, 2.141, 2.340, 2.539", \
                          "1.747, 1.763, 1.783, 1.823, 1.942, 2.141, 2.340", \
                          "1.548, 1.564, 1.584, 1.624, 1.743, 1.943, 2.142" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.866, 1.879, 1.895, 1.927, 2.022, 2.182, 2.341", \
                          "1.851, 1.863, 1.879, 1.911, 2.007, 2.166, 2.325", \
                          "1.831, 1.843, 1.859, 1.891, 1.987, 2.146, 2.305", \
                          "1.791, 1.804, 1.820, 1.851, 1.947, 2.106, 2.265", \
                          "1.672, 1.685, 1.700, 1.732, 1.828, 1.987, 2.146", \
                          "1.473, 1.486, 1.502, 1.534, 1.629, 1.788, 1.947", \
                          "1.275, 1.287, 1.303, 1.335, 1.431, 1.590, 1.749" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKB;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.617, 0.601, 0.582, 0.542, 0.500, 0.500, 0.500" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500", \
                          "0.500, 0.500, 0.500, 0.500, 0.500, 0.500, 0.500" \
                        )
                        }
               }
        }
        pin(WENB){
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLKB;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "2.304, 2.321, 2.343, 2.385, 2.513, 2.727, 2.940", \
                          "2.288, 2.305, 2.327, 2.369, 2.498, 2.711, 2.924", \
                          "2.269, 2.286, 2.307, 2.350, 2.478, 2.691, 2.904", \
                          "2.229, 2.246, 2.267, 2.310, 2.438, 2.651, 2.865", \
                          "2.110, 2.127, 2.148, 2.191, 2.319, 2.532, 2.746", \
                          "1.911, 1.928, 1.949, 1.992, 2.120, 2.334, 2.547", \
                          "1.712, 1.729, 1.751, 1.794, 1.922, 2.135, 2.348" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "2.301, 2.314, 2.331, 2.364, 2.465, 2.632, 2.800", \
                          "2.285, 2.298, 2.315, 2.349, 2.449, 2.616, 2.784", \
                          "2.265, 2.279, 2.295, 2.329, 2.429, 2.597, 2.764", \
                          "2.225, 2.239, 2.256, 2.289, 2.389, 2.557, 2.724", \
                          "2.106, 2.120, 2.136, 2.170, 2.270, 2.438, 2.605", \
                          "1.908, 1.921, 1.938, 1.971, 2.072, 2.239, 2.406", \
                          "1.709, 1.722, 1.739, 1.773, 1.873, 2.040, 2.208" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKB;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630" \
                        )
                        }
               }
        }
        bus(AB)   {
                bus_type : CacheMem_ADDRESS;
                direction : input;
                capacitance : 0.017;
                timing() {
                        related_pin     : CLKB;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.850, 1.862, 1.877, 1.907, 1.997, 2.147, 2.297", \
                          "1.834, 1.846, 1.861, 1.891, 1.981, 2.131, 2.281", \
                          "1.814, 1.826, 1.841, 1.871, 1.961, 2.111, 2.261", \
                          "1.774, 1.786, 1.801, 1.831, 1.921, 2.071, 2.221", \
                          "1.655, 1.667, 1.682, 1.712, 1.802, 1.952, 2.102", \
                          "1.456, 1.468, 1.483, 1.513, 1.603, 1.754, 1.904", \
                          "1.258, 1.270, 1.285, 1.315, 1.405, 1.555, 1.705" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.026, 1.037, 1.051, 1.079, 1.163, 1.303, 1.444", \
                          "1.010, 1.021, 1.035, 1.063, 1.147, 1.287, 1.428", \
                          "0.990, 1.001, 1.015, 1.043, 1.127, 1.268, 1.408", \
                          "0.950, 0.961, 0.975, 1.003, 1.088, 1.228, 1.368", \
                          "0.831, 0.842, 0.856, 0.884, 0.968, 1.109, 1.249", \
                          "0.632, 0.644, 0.658, 0.686, 0.770, 0.910, 1.050", \
                          "0.434, 0.445, 0.459, 0.487, 0.571, 0.711, 0.852" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKB;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.415, 0.403, 0.388, 0.358, 0.268, 0.230, 0.230" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.230, 0.230, 0.230, 0.230, 0.230, 0.230, 0.230", \
                          "0.273, 0.261, 0.247, 0.230, 0.230, 0.230, 0.230", \
                          "0.471, 0.460, 0.446, 0.418, 0.334, 0.230, 0.230", \
                          "0.670, 0.659, 0.644, 0.616, 0.532, 0.392, 0.252" \
                        )
                        }
               }
                internal_power(){
                        when : "CENB";
                        rise_power(CacheMem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.216, 0.216")
                        }
                        fall_power(CacheMem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.216, 0.216")
                        }
                }
        }
        bus(DB)   {
                bus_type : CacheMem_DATA;
                memory_write() {
                        address : AB;
                        clocked_on : "CLKB";
                }
                direction : input;
                capacitance : 0.001;
                timing() {
                        related_pin     : CLKB;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.564, 1.578, 1.594, 1.627, 1.726, 1.892, 2.057", \
                          "1.548, 1.562, 1.578, 1.611, 1.711, 1.876, 2.041", \
                          "1.529, 1.542, 1.558, 1.591, 1.691, 1.856, 2.022", \
                          "1.489, 1.502, 1.519, 1.552, 1.651, 1.816, 1.982", \
                          "1.370, 1.383, 1.399, 1.433, 1.532, 1.697, 1.863", \
                          "1.171, 1.184, 1.201, 1.234, 1.333, 1.499, 1.664", \
                          "0.972, 0.986, 1.002, 1.035, 1.135, 1.300, 1.465" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.815, 1.830, 1.848, 1.885, 1.995, 2.178, 2.362", \
                          "1.799, 1.814, 1.832, 1.869, 1.979, 2.162, 2.346", \
                          "1.779, 1.794, 1.812, 1.849, 1.959, 2.143, 2.326", \
                          "1.740, 1.754, 1.773, 1.809, 1.919, 2.103, 2.286", \
                          "1.620, 1.635, 1.653, 1.690, 1.800, 1.984, 2.167", \
                          "1.422, 1.436, 1.455, 1.491, 1.602, 1.785, 1.969", \
                          "1.223, 1.238, 1.256, 1.293, 1.403, 1.586, 1.770" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKB;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.630, 0.630, 0.630, 0.630, 0.630, 0.630, 0.630", \
                          "0.755, 0.740, 0.722, 0.685, 0.630, 0.630, 0.630" \
                        )
                        }
               }
        }

        cell_leakage_power : 3.19E-3;
}
}
