/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2019  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Dual Port SRAM Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2009Q1V1
 *      comment:		
 *      configuration:	 -instname CacheMem -words 256 -bits 32 -frequency 1000 -ring_width 4.0 -mux 8 -write_mask off -wp_size 8 -top_layer "met5-8" -power_type rings -horiz met3 -vert met4 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 6 -dpccm on -asvm on -corners ff_1p32v_m40c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_125c
 *
 *      Synopsys model for Synchronous Dual-Port Ram
 *
 *      Library Name:   aci
 *      Instance Name:  CacheMem
 *      Words:          256
 *      Word Width:     32
 *      Mux:            8
 *      Process:        tt_1p2v_25c
 *
 *      Creation Date:  2019-05-01 00:28:09Z
 *      Version:        2009Q1V1
 *
 *      Verified With: Synopsys Primetime
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.
 *          Different modes are defined in order to disable false path
 *          during the specific mode activation when doing static timing analysis. 
 *
 *
 *      Modeling Limitations: This stamp does not include power information.
 *          Due to limitations of the stamp modeling, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

MODELDATA
OPERATING_CONDITION "tt_1p2v_25c";
DESIGN              "CacheMem";

CELLDATA
area                   : 125758.368;
default_max_transition : 1.000;
ENDCELLDATA

PORTDATA
QA[31:0] : MAXCAP(0.860);
AA[7:0] : CAP(0.017);
DA[31:0] : CAP(0.001);
CLKA : CAP(0.131), MAXTRANS(1.000);
WENA : CAP(0.008);
CENA : CAP(0.008);
QB[31:0] : MAXCAP(0.860);
AB[7:0] : CAP(0.017);
DB[31:0] : CAP(0.001);
CLKB : CAP(0.131), MAXTRANS(1.000);
WENB : CAP(0.008);
CENB : CAP(0.008);
ENDPORTDATA

TIMINGDATA
GLOBAL
        lu_table_template(CacheMem_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(CacheMem_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(CacheMem_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
ENDGLOBAL
ARCDATA
setup_a_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.891, 0.898, 0.908, 0.927, 0.966, 1.044, 1.082", \
                          "0.877, 0.884, 0.894, 0.913, 0.952, 1.030, 1.068", \
                          "0.859, 0.867, 0.876, 0.896, 0.935, 1.012, 1.051", \
                          "0.824, 0.832, 0.841, 0.861, 0.899, 0.977, 1.016", \
                          "0.754, 0.761, 0.771, 0.790, 0.829, 0.907, 0.945", \
                          "0.613, 0.621, 0.631, 0.650, 0.689, 0.766, 0.805", \
                          "0.543, 0.551, 0.560, 0.580, 0.619, 0.696, 0.735" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.647, 0.655, 0.664, 0.683, 0.721, 0.796, 0.834", \
                          "0.633, 0.641, 0.650, 0.669, 0.707, 0.782, 0.820", \
                          "0.616, 0.623, 0.633, 0.652, 0.689, 0.765, 0.802", \
                          "0.581, 0.588, 0.598, 0.616, 0.654, 0.730, 0.767", \
                          "0.510, 0.518, 0.527, 0.546, 0.584, 0.659, 0.697", \
                          "0.370, 0.378, 0.387, 0.406, 0.443, 0.519, 0.557", \
                          "0.300, 0.307, 0.317, 0.336, 0.373, 0.449, 0.486" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_a_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.306, 0.298, 0.288, 0.269, 0.230, 0.220, 0.220", \
                          "0.376, 0.368, 0.359, 0.339, 0.301, 0.223, 0.220" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.283, 0.276, 0.266, 0.247, 0.220, 0.220, 0.220", \
                          "0.424, 0.416, 0.407, 0.388, 0.350, 0.275, 0.237", \
                          "0.494, 0.486, 0.477, 0.458, 0.420, 0.345, 0.307" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_d_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.839, 0.845, 0.854, 0.871, 0.905, 0.973, 1.007", \
                          "0.825, 0.831, 0.840, 0.857, 0.891, 0.959, 0.993", \
                          "0.807, 0.814, 0.822, 0.839, 0.873, 0.941, 0.975", \
                          "0.772, 0.779, 0.787, 0.804, 0.838, 0.906, 0.940", \
                          "0.702, 0.709, 0.717, 0.734, 0.768, 0.836, 0.870", \
                          "0.561, 0.568, 0.577, 0.594, 0.628, 0.695, 0.729", \
                          "0.491, 0.498, 0.506, 0.523, 0.557, 0.625, 0.659" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.928, 0.939, 0.953, 0.981, 1.036, 1.148, 1.203", \
                          "0.914, 0.925, 0.939, 0.967, 1.022, 1.133, 1.189", \
                          "0.896, 0.907, 0.921, 0.949, 1.005, 1.116, 1.172", \
                          "0.861, 0.872, 0.886, 0.914, 0.970, 1.081, 1.136", \
                          "0.791, 0.802, 0.816, 0.844, 0.899, 1.011, 1.066", \
                          "0.650, 0.662, 0.675, 0.703, 0.759, 0.870, 0.926", \
                          "0.580, 0.591, 0.605, 0.633, 0.689, 0.800, 0.856" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_d_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.494, 0.487, 0.479, 0.462, 0.450, 0.450, 0.450" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.464, 0.453, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.605, 0.593, 0.580, 0.552, 0.496, 0.450, 0.450", \
                          "0.675, 0.664, 0.650, 0.622, 0.566, 0.455, 0.450" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_cen_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.188, 1.200, 1.214, 1.243, 1.301, 1.416, 1.474", \
                          "1.174, 1.186, 1.200, 1.229, 1.287, 1.402, 1.460", \
                          "1.156, 1.168, 1.182, 1.211, 1.269, 1.385, 1.442", \
                          "1.121, 1.133, 1.147, 1.176, 1.234, 1.349, 1.407", \
                          "1.051, 1.063, 1.077, 1.106, 1.164, 1.279, 1.337", \
                          "0.911, 0.922, 0.937, 0.966, 1.023, 1.139, 1.197", \
                          "0.840, 0.852, 0.866, 0.895, 0.953, 1.069, 1.126" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.047, 1.056, 1.068, 1.090, 1.135, 1.225, 1.270", \
                          "1.033, 1.042, 1.053, 1.076, 1.121, 1.211, 1.256", \
                          "1.016, 1.025, 1.036, 1.058, 1.104, 1.194, 1.239", \
                          "0.981, 0.990, 1.001, 1.023, 1.068, 1.159, 1.204", \
                          "0.910, 0.919, 0.931, 0.953, 0.998, 1.088, 1.133", \
                          "0.770, 0.779, 0.790, 0.813, 0.858, 0.948, 0.993", \
                          "0.700, 0.709, 0.720, 0.743, 0.788, 0.878, 0.923" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_cen_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.534, 0.523, 0.508, 0.479, 0.450, 0.450, 0.450", \
                          "0.604, 0.593, 0.578, 0.550, 0.492, 0.450, 0.450" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_wen_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.244, 1.257, 1.273, 1.306, 1.371, 1.501, 1.567", \
                          "1.230, 1.243, 1.259, 1.292, 1.357, 1.487, 1.552", \
                          "1.212, 1.225, 1.242, 1.274, 1.339, 1.470, 1.535", \
                          "1.177, 1.190, 1.207, 1.239, 1.304, 1.435, 1.500", \
                          "1.107, 1.120, 1.136, 1.169, 1.234, 1.364, 1.430", \
                          "0.967, 0.980, 0.996, 1.029, 1.094, 1.224, 1.289", \
                          "0.896, 0.910, 0.926, 0.958, 1.024, 1.154, 1.219" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.318, 1.328, 1.340, 1.364, 1.413, 1.511, 1.559", \
                          "1.304, 1.314, 1.326, 1.350, 1.399, 1.497, 1.545", \
                          "1.287, 1.296, 1.309, 1.333, 1.382, 1.479, 1.528", \
                          "1.251, 1.261, 1.273, 1.298, 1.346, 1.444, 1.493", \
                          "1.181, 1.191, 1.203, 1.228, 1.276, 1.374, 1.422", \
                          "1.041, 1.051, 1.063, 1.087, 1.136, 1.233, 1.282", \
                          "0.971, 0.980, 0.993, 1.017, 1.066, 1.163, 1.212" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_wen_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
ENDARCDATA


ARCDATA
period_clk_0_A:
                        rise_constraint(scalar) {
                                values ("3.005")
                        }
                        fall_constraint(scalar) {
                                values ("3.005")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_h_0_A:
                        rise_constraint(scalar) {
                                values ("0.196")
                        }
                        fall_constraint(scalar) {
                                values ("0.196")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_l_0_A:
                        rise_constraint(scalar) {
                                values ("0.319")
                        }
                        fall_constraint(scalar) {
                                values ("0.319")
                        }
ENDARCDATA
ARCDATA
dly_clk_q_0_A:
                        cell_rise(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "2.484, 2.528, 2.573, 2.661, 2.857, 3.145, 3.454", \
                          "2.498, 2.542, 2.587, 2.675, 2.871, 3.159, 3.468", \
                          "2.516, 2.560, 2.604, 2.693, 2.888, 3.177, 3.486", \
                          "2.551, 2.595, 2.639, 2.728, 2.923, 3.212, 3.521", \
                          "2.621, 2.665, 2.710, 2.798, 2.993, 3.282, 3.591", \
                          "2.761, 2.806, 2.850, 2.939, 3.134, 3.422, 3.732", \
                          "2.831, 2.876, 2.920, 3.009, 3.204, 3.493, 3.802" \
                        )
                        }
                        rise_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.048, 0.133, 0.219, 0.390, 0.845, 1.643, 2.498")
                        }
                        cell_fall(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "2.484, 2.528, 2.573, 2.661, 2.857, 3.145, 3.454", \
                          "2.498, 2.542, 2.587, 2.675, 2.871, 3.159, 3.468", \
                          "2.516, 2.560, 2.604, 2.693, 2.888, 3.177, 3.486", \
                          "2.551, 2.595, 2.639, 2.728, 2.923, 3.212, 3.521", \
                          "2.621, 2.665, 2.710, 2.798, 2.993, 3.282, 3.591", \
                          "2.761, 2.806, 2.850, 2.939, 3.134, 3.422, 3.732", \
                          "2.831, 2.876, 2.920, 3.009, 3.204, 3.493, 3.802" \
                        )
                        }
                        fall_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.059, 0.118, 0.177, 0.295, 0.610, 1.161, 1.752")
                        }
ENDARCDATA
ARCDATA
setup_a_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.891, 0.898, 0.908, 0.927, 0.966, 1.044, 1.082", \
                          "0.877, 0.884, 0.894, 0.913, 0.952, 1.030, 1.068", \
                          "0.859, 0.867, 0.876, 0.896, 0.935, 1.012, 1.051", \
                          "0.824, 0.832, 0.841, 0.861, 0.899, 0.977, 1.016", \
                          "0.754, 0.761, 0.771, 0.790, 0.829, 0.907, 0.945", \
                          "0.613, 0.621, 0.631, 0.650, 0.689, 0.766, 0.805", \
                          "0.543, 0.551, 0.560, 0.580, 0.619, 0.696, 0.735" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.647, 0.655, 0.664, 0.683, 0.721, 0.796, 0.834", \
                          "0.633, 0.641, 0.650, 0.669, 0.707, 0.782, 0.820", \
                          "0.616, 0.623, 0.633, 0.652, 0.689, 0.765, 0.802", \
                          "0.581, 0.588, 0.598, 0.616, 0.654, 0.730, 0.767", \
                          "0.510, 0.518, 0.527, 0.546, 0.584, 0.659, 0.697", \
                          "0.370, 0.378, 0.387, 0.406, 0.443, 0.519, 0.557", \
                          "0.300, 0.307, 0.317, 0.336, 0.373, 0.449, 0.486" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_a_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.306, 0.298, 0.288, 0.269, 0.230, 0.220, 0.220", \
                          "0.376, 0.368, 0.359, 0.339, 0.301, 0.223, 0.220" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.220, 0.220, 0.220, 0.220, 0.220, 0.220, 0.220", \
                          "0.283, 0.276, 0.266, 0.247, 0.220, 0.220, 0.220", \
                          "0.424, 0.416, 0.407, 0.388, 0.350, 0.275, 0.237", \
                          "0.494, 0.486, 0.477, 0.458, 0.420, 0.345, 0.307" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_d_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.839, 0.845, 0.854, 0.871, 0.905, 0.973, 1.007", \
                          "0.825, 0.831, 0.840, 0.857, 0.891, 0.959, 0.993", \
                          "0.807, 0.814, 0.822, 0.839, 0.873, 0.941, 0.975", \
                          "0.772, 0.779, 0.787, 0.804, 0.838, 0.906, 0.940", \
                          "0.702, 0.709, 0.717, 0.734, 0.768, 0.836, 0.870", \
                          "0.561, 0.568, 0.577, 0.594, 0.628, 0.695, 0.729", \
                          "0.491, 0.498, 0.506, 0.523, 0.557, 0.625, 0.659" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.928, 0.939, 0.953, 0.981, 1.036, 1.148, 1.203", \
                          "0.914, 0.925, 0.939, 0.967, 1.022, 1.133, 1.189", \
                          "0.896, 0.907, 0.921, 0.949, 1.005, 1.116, 1.172", \
                          "0.861, 0.872, 0.886, 0.914, 0.970, 1.081, 1.136", \
                          "0.791, 0.802, 0.816, 0.844, 0.899, 1.011, 1.066", \
                          "0.650, 0.662, 0.675, 0.703, 0.759, 0.870, 0.926", \
                          "0.580, 0.591, 0.605, 0.633, 0.689, 0.800, 0.856" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_d_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.494, 0.487, 0.479, 0.462, 0.450, 0.450, 0.450" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.464, 0.453, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.605, 0.593, 0.580, 0.552, 0.496, 0.450, 0.450", \
                          "0.675, 0.664, 0.650, 0.622, 0.566, 0.455, 0.450" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_cen_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.188, 1.200, 1.214, 1.243, 1.301, 1.416, 1.474", \
                          "1.174, 1.186, 1.200, 1.229, 1.287, 1.402, 1.460", \
                          "1.156, 1.168, 1.182, 1.211, 1.269, 1.385, 1.442", \
                          "1.121, 1.133, 1.147, 1.176, 1.234, 1.349, 1.407", \
                          "1.051, 1.063, 1.077, 1.106, 1.164, 1.279, 1.337", \
                          "0.911, 0.922, 0.937, 0.966, 1.023, 1.139, 1.197", \
                          "0.840, 0.852, 0.866, 0.895, 0.953, 1.069, 1.126" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.047, 1.056, 1.068, 1.090, 1.135, 1.225, 1.270", \
                          "1.033, 1.042, 1.053, 1.076, 1.121, 1.211, 1.256", \
                          "1.016, 1.025, 1.036, 1.058, 1.104, 1.194, 1.239", \
                          "0.981, 0.990, 1.001, 1.023, 1.068, 1.159, 1.204", \
                          "0.910, 0.919, 0.931, 0.953, 0.998, 1.088, 1.133", \
                          "0.770, 0.779, 0.790, 0.813, 0.858, 0.948, 0.993", \
                          "0.700, 0.709, 0.720, 0.743, 0.788, 0.878, 0.923" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_cen_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.534, 0.523, 0.508, 0.479, 0.450, 0.450, 0.450", \
                          "0.604, 0.593, 0.578, 0.550, 0.492, 0.450, 0.450" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_wen_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.244, 1.257, 1.273, 1.306, 1.371, 1.501, 1.567", \
                          "1.230, 1.243, 1.259, 1.292, 1.357, 1.487, 1.552", \
                          "1.212, 1.225, 1.242, 1.274, 1.339, 1.470, 1.535", \
                          "1.177, 1.190, 1.207, 1.239, 1.304, 1.435, 1.500", \
                          "1.107, 1.120, 1.136, 1.169, 1.234, 1.364, 1.430", \
                          "0.967, 0.980, 0.996, 1.029, 1.094, 1.224, 1.289", \
                          "0.896, 0.910, 0.926, 0.958, 1.024, 1.154, 1.219" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "1.318, 1.328, 1.340, 1.364, 1.413, 1.511, 1.559", \
                          "1.304, 1.314, 1.326, 1.350, 1.399, 1.497, 1.545", \
                          "1.287, 1.296, 1.309, 1.333, 1.382, 1.479, 1.528", \
                          "1.251, 1.261, 1.273, 1.298, 1.346, 1.444, 1.493", \
                          "1.181, 1.191, 1.203, 1.228, 1.276, 1.374, 1.422", \
                          "1.041, 1.051, 1.063, 1.087, 1.136, 1.233, 1.282", \
                          "0.971, 0.980, 0.993, 1.017, 1.066, 1.163, 1.212" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_wen_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450", \
                          "0.450, 0.450, 0.450, 0.450, 0.450, 0.450, 0.450" \
                        )
                        }
ENDARCDATA


ARCDATA
period_clk_0_B:
                        rise_constraint(scalar) {
                                values ("3.005")
                        }
                        fall_constraint(scalar) {
                                values ("3.005")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_h_0_B:
                        rise_constraint(scalar) {
                                values ("0.196")
                        }
                        fall_constraint(scalar) {
                                values ("0.196")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_l_0_B:
                        rise_constraint(scalar) {
                                values ("0.319")
                        }
                        fall_constraint(scalar) {
                                values ("0.319")
                        }
ENDARCDATA
ARCDATA
dly_clk_q_0_B:
                        cell_rise(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "2.484, 2.528, 2.573, 2.661, 2.857, 3.145, 3.454", \
                          "2.498, 2.542, 2.587, 2.675, 2.871, 3.159, 3.468", \
                          "2.516, 2.560, 2.604, 2.693, 2.888, 3.177, 3.486", \
                          "2.551, 2.595, 2.639, 2.728, 2.923, 3.212, 3.521", \
                          "2.621, 2.665, 2.710, 2.798, 2.993, 3.282, 3.591", \
                          "2.761, 2.806, 2.850, 2.939, 3.134, 3.422, 3.732", \
                          "2.831, 2.876, 2.920, 3.009, 3.204, 3.493, 3.802" \
                        )
                        }
                        rise_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.048, 0.133, 0.219, 0.390, 0.845, 1.643, 2.498")
                        }
                        cell_fall(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "2.484, 2.528, 2.573, 2.661, 2.857, 3.145, 3.454", \
                          "2.498, 2.542, 2.587, 2.675, 2.871, 3.159, 3.468", \
                          "2.516, 2.560, 2.604, 2.693, 2.888, 3.177, 3.486", \
                          "2.551, 2.595, 2.639, 2.728, 2.923, 3.212, 3.521", \
                          "2.621, 2.665, 2.710, 2.798, 2.993, 3.282, 3.591", \
                          "2.761, 2.806, 2.850, 2.939, 3.134, 3.422, 3.732", \
                          "2.831, 2.876, 2.920, 3.009, 3.204, 3.493, 3.802" \
                        )
                        }
                        fall_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.059, 0.118, 0.177, 0.295, 0.610, 1.161, 1.752")
                        }
ENDARCDATA
ARCDATA
cont_cc_A:
                        rise_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231" \
                        )
                        }
                        fall_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231" \
                        )
                        }
ENDARCDATA
ARCDATA
cont_cc_B:
                        rise_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231" \
                        )
                        }
                        fall_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.800, 1.000");
                        values ( \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231", \
                          "2.231, 2.231, 2.231, 2.231, 2.231, 2.231, 2.231" \
                        )
                        }
ENDARCDATA
ENDTIMINGDATA
ENDMODELDATA
