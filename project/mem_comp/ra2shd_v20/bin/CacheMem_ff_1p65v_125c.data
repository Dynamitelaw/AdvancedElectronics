/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2019  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Dual Port SRAM Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2009Q1V1
 *      comment:		
 *      configuration:	 -instname CacheMem -words 256 -bits 32 -frequency 1000 -ring_width 4.0 -mux 8 -write_mask off -wp_size 8 -top_layer "met5-8" -power_type rings -horiz met3 -vert met4 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 6 -dpccm on -asvm on -corners ff_1p32v_m40c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_125c
 *
 *      Synopsys model for Synchronous Dual-Port Ram
 *
 *      Library Name:   aci
 *      Instance Name:  CacheMem
 *      Words:          256
 *      Word Width:     32
 *      Mux:            8
 *      Process:        ff_1p65v_125c
 *
 *      Creation Date:  2019-05-01 00:28:09Z
 *      Version:        2009Q1V1
 *
 *      Verified With: Synopsys Primetime
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.
 *          Different modes are defined in order to disable false path
 *          during the specific mode activation when doing static timing analysis. 
 *
 *
 *      Modeling Limitations: This stamp does not include power information.
 *          Due to limitations of the stamp modeling, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

MODELDATA
OPERATING_CONDITION "ff_1p65v_125c";
DESIGN              "CacheMem";

CELLDATA
area                   : 125758.368;
default_max_transition : 0.750;
ENDCELLDATA

PORTDATA
QA[31:0] : MAXCAP(0.860);
AA[7:0] : CAP(0.017);
DA[31:0] : CAP(0.001);
CLKA : CAP(0.128), MAXTRANS(0.750);
WENA : CAP(0.008);
CENA : CAP(0.008);
QB[31:0] : MAXCAP(0.860);
AB[7:0] : CAP(0.017);
DB[31:0] : CAP(0.001);
CLKB : CAP(0.128), MAXTRANS(0.750);
WENB : CAP(0.008);
CENB : CAP(0.008);
ENDPORTDATA

TIMINGDATA
GLOBAL
        lu_table_template(CacheMem_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(CacheMem_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(CacheMem_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
ENDGLOBAL
ARCDATA
setup_a_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.419, 0.419, 0.419, 0.419, 0.420, 0.420, 0.420", \
                          "0.413, 0.413, 0.413, 0.413, 0.414, 0.414, 0.414", \
                          "0.406, 0.406, 0.406, 0.406, 0.406, 0.406, 0.406", \
                          "0.391, 0.391, 0.391, 0.391, 0.391, 0.391, 0.391", \
                          "0.361, 0.361, 0.361, 0.361, 0.361, 0.361, 0.361", \
                          "0.331, 0.331, 0.331, 0.331, 0.331, 0.331, 0.331", \
                          "0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.389, 0.391, 0.393, 0.398, 0.407, 0.416, 0.422", \
                          "0.383, 0.385, 0.387, 0.392, 0.401, 0.410, 0.416", \
                          "0.376, 0.378, 0.380, 0.384, 0.393, 0.402, 0.409", \
                          "0.361, 0.363, 0.365, 0.369, 0.378, 0.387, 0.394", \
                          "0.331, 0.333, 0.335, 0.339, 0.348, 0.357, 0.364", \
                          "0.301, 0.303, 0.305, 0.309, 0.318, 0.327, 0.334", \
                          "0.278, 0.280, 0.282, 0.287, 0.296, 0.305, 0.312" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_a_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182", \
                          "0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182", \
                          "0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182", \
                          "0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194", \
                          "0.224, 0.224, 0.224, 0.224, 0.224, 0.224, 0.224", \
                          "0.254, 0.254, 0.254, 0.254, 0.254, 0.254, 0.254", \
                          "0.276, 0.276, 0.276, 0.276, 0.276, 0.276, 0.276" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182", \
                          "0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182", \
                          "0.183, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182", \
                          "0.198, 0.196, 0.194, 0.189, 0.182, 0.182, 0.182", \
                          "0.228, 0.226, 0.224, 0.219, 0.210, 0.201, 0.195", \
                          "0.258, 0.256, 0.254, 0.249, 0.240, 0.231, 0.225", \
                          "0.280, 0.278, 0.276, 0.272, 0.263, 0.254, 0.247" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_d_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.405, 0.403, 0.401, 0.397, 0.388, 0.379, 0.373", \
                          "0.399, 0.397, 0.395, 0.391, 0.382, 0.373, 0.367", \
                          "0.391, 0.390, 0.388, 0.383, 0.375, 0.366, 0.359", \
                          "0.376, 0.375, 0.373, 0.368, 0.360, 0.351, 0.344", \
                          "0.347, 0.345, 0.343, 0.338, 0.330, 0.321, 0.315", \
                          "0.317, 0.315, 0.313, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.428, 0.433, 0.439, 0.452, 0.477, 0.503, 0.522", \
                          "0.422, 0.427, 0.433, 0.446, 0.471, 0.497, 0.516", \
                          "0.414, 0.419, 0.426, 0.438, 0.464, 0.489, 0.508", \
                          "0.399, 0.404, 0.411, 0.424, 0.449, 0.474, 0.493", \
                          "0.369, 0.375, 0.381, 0.394, 0.419, 0.444, 0.463", \
                          "0.340, 0.345, 0.351, 0.364, 0.389, 0.414, 0.433", \
                          "0.317, 0.322, 0.329, 0.341, 0.367, 0.392, 0.411" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_d_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.314, 0.320", \
                          "0.318, 0.320, 0.322, 0.327, 0.335, 0.344, 0.350", \
                          "0.348, 0.350, 0.352, 0.357, 0.365, 0.374, 0.380", \
                          "0.371, 0.373, 0.375, 0.379, 0.388, 0.396, 0.403" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.313, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.321, 0.316, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.336, 0.331, 0.324, 0.312, 0.310, 0.310, 0.310", \
                          "0.366, 0.361, 0.354, 0.341, 0.316, 0.310, 0.310", \
                          "0.396, 0.390, 0.384, 0.371, 0.346, 0.321, 0.310", \
                          "0.418, 0.413, 0.407, 0.394, 0.368, 0.343, 0.324" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_cen_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.478, 0.480, 0.483, 0.488, 0.499, 0.509, 0.517", \
                          "0.472, 0.474, 0.477, 0.482, 0.493, 0.503, 0.511", \
                          "0.465, 0.467, 0.469, 0.475, 0.485, 0.496, 0.504", \
                          "0.450, 0.452, 0.454, 0.460, 0.470, 0.481, 0.489", \
                          "0.420, 0.422, 0.424, 0.430, 0.440, 0.451, 0.459", \
                          "0.390, 0.392, 0.395, 0.400, 0.410, 0.421, 0.429", \
                          "0.367, 0.369, 0.372, 0.377, 0.388, 0.399, 0.407" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.416, 0.417, 0.418, 0.421, 0.427, 0.432, 0.436", \
                          "0.410, 0.411, 0.412, 0.415, 0.421, 0.426, 0.430", \
                          "0.402, 0.404, 0.405, 0.408, 0.413, 0.418, 0.423", \
                          "0.388, 0.389, 0.390, 0.393, 0.398, 0.404, 0.408", \
                          "0.358, 0.359, 0.360, 0.363, 0.368, 0.374, 0.378", \
                          "0.328, 0.329, 0.330, 0.333, 0.338, 0.344, 0.348", \
                          "0.305, 0.306, 0.308, 0.310, 0.316, 0.321, 0.325" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_cen_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.244, 0.242, 0.239, 0.235, 0.235, 0.235, 0.235", \
                          "0.274, 0.271, 0.269, 0.264, 0.253, 0.242, 0.235", \
                          "0.296, 0.294, 0.291, 0.286, 0.275, 0.265, 0.257" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_wen_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.588, 0.591, 0.594, 0.601, 0.615, 0.628, 0.638", \
                          "0.582, 0.585, 0.588, 0.595, 0.609, 0.622, 0.632", \
                          "0.574, 0.577, 0.581, 0.587, 0.601, 0.615, 0.625", \
                          "0.559, 0.562, 0.566, 0.572, 0.586, 0.600, 0.610", \
                          "0.530, 0.532, 0.536, 0.543, 0.556, 0.570, 0.580", \
                          "0.500, 0.502, 0.506, 0.513, 0.526, 0.540, 0.550", \
                          "0.477, 0.480, 0.483, 0.490, 0.504, 0.517, 0.528" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.580, 0.581, 0.583, 0.586, 0.593, 0.600, 0.605", \
                          "0.574, 0.575, 0.577, 0.580, 0.587, 0.594, 0.599", \
                          "0.567, 0.568, 0.570, 0.573, 0.580, 0.586, 0.591", \
                          "0.552, 0.553, 0.555, 0.558, 0.565, 0.571, 0.576", \
                          "0.522, 0.523, 0.525, 0.528, 0.535, 0.541, 0.547", \
                          "0.492, 0.493, 0.495, 0.498, 0.505, 0.512, 0.517", \
                          "0.469, 0.471, 0.472, 0.476, 0.482, 0.489, 0.494" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_wen_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310" \
                        )
                        }
ENDARCDATA


ARCDATA
period_clk_0_A:
                        rise_constraint(scalar) {
                                values ("1.226")
                        }
                        fall_constraint(scalar) {
                                values ("1.226")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_h_0_A:
                        rise_constraint(scalar) {
                                values ("0.073")
                        }
                        fall_constraint(scalar) {
                                values ("0.073")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_l_0_A:
                        rise_constraint(scalar) {
                                values ("0.088")
                        }
                        fall_constraint(scalar) {
                                values ("0.088")
                        }
ENDARCDATA
ARCDATA
dly_clk_q_0_A:
                        cell_rise(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "0.664, 0.683, 0.702, 0.740, 0.816, 0.949, 1.091", \
                          "0.670, 0.689, 0.708, 0.746, 0.822, 0.955, 1.097", \
                          "0.678, 0.697, 0.716, 0.753, 0.830, 0.963, 1.105", \
                          "0.693, 0.712, 0.731, 0.768, 0.845, 0.978, 1.120", \
                          "0.723, 0.742, 0.760, 0.798, 0.875, 1.007, 1.150", \
                          "0.753, 0.772, 0.790, 0.828, 0.905, 1.037, 1.179", \
                          "0.775, 0.794, 0.813, 0.851, 0.927, 1.060, 1.202" \
                        )
                        }
                        rise_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.023, 0.063, 0.104, 0.185, 0.401, 0.778, 1.183")
                        }
                        cell_fall(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "0.664, 0.683, 0.702, 0.740, 0.816, 0.949, 1.091", \
                          "0.670, 0.689, 0.708, 0.746, 0.822, 0.955, 1.097", \
                          "0.678, 0.697, 0.716, 0.753, 0.830, 0.963, 1.105", \
                          "0.693, 0.712, 0.731, 0.768, 0.845, 0.978, 1.120", \
                          "0.723, 0.742, 0.760, 0.798, 0.875, 1.007, 1.150", \
                          "0.753, 0.772, 0.790, 0.828, 0.905, 1.037, 1.179", \
                          "0.775, 0.794, 0.813, 0.851, 0.927, 1.060, 1.202" \
                        )
                        }
                        fall_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.028, 0.056, 0.084, 0.141, 0.290, 0.552, 0.833")
                        }
ENDARCDATA
ARCDATA
setup_a_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.419, 0.419, 0.419, 0.419, 0.420, 0.420, 0.420", \
                          "0.413, 0.413, 0.413, 0.413, 0.414, 0.414, 0.414", \
                          "0.406, 0.406, 0.406, 0.406, 0.406, 0.406, 0.406", \
                          "0.391, 0.391, 0.391, 0.391, 0.391, 0.391, 0.391", \
                          "0.361, 0.361, 0.361, 0.361, 0.361, 0.361, 0.361", \
                          "0.331, 0.331, 0.331, 0.331, 0.331, 0.331, 0.331", \
                          "0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.389, 0.391, 0.393, 0.398, 0.407, 0.416, 0.422", \
                          "0.383, 0.385, 0.387, 0.392, 0.401, 0.410, 0.416", \
                          "0.376, 0.378, 0.380, 0.384, 0.393, 0.402, 0.409", \
                          "0.361, 0.363, 0.365, 0.369, 0.378, 0.387, 0.394", \
                          "0.331, 0.333, 0.335, 0.339, 0.348, 0.357, 0.364", \
                          "0.301, 0.303, 0.305, 0.309, 0.318, 0.327, 0.334", \
                          "0.278, 0.280, 0.282, 0.287, 0.296, 0.305, 0.312" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_a_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182", \
                          "0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182", \
                          "0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182", \
                          "0.194, 0.194, 0.194, 0.194, 0.194, 0.194, 0.194", \
                          "0.224, 0.224, 0.224, 0.224, 0.224, 0.224, 0.224", \
                          "0.254, 0.254, 0.254, 0.254, 0.254, 0.254, 0.254", \
                          "0.276, 0.276, 0.276, 0.276, 0.276, 0.276, 0.276" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182", \
                          "0.182, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182", \
                          "0.183, 0.182, 0.182, 0.182, 0.182, 0.182, 0.182", \
                          "0.198, 0.196, 0.194, 0.189, 0.182, 0.182, 0.182", \
                          "0.228, 0.226, 0.224, 0.219, 0.210, 0.201, 0.195", \
                          "0.258, 0.256, 0.254, 0.249, 0.240, 0.231, 0.225", \
                          "0.280, 0.278, 0.276, 0.272, 0.263, 0.254, 0.247" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_d_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.405, 0.403, 0.401, 0.397, 0.388, 0.379, 0.373", \
                          "0.399, 0.397, 0.395, 0.391, 0.382, 0.373, 0.367", \
                          "0.391, 0.390, 0.388, 0.383, 0.375, 0.366, 0.359", \
                          "0.376, 0.375, 0.373, 0.368, 0.360, 0.351, 0.344", \
                          "0.347, 0.345, 0.343, 0.338, 0.330, 0.321, 0.315", \
                          "0.317, 0.315, 0.313, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.428, 0.433, 0.439, 0.452, 0.477, 0.503, 0.522", \
                          "0.422, 0.427, 0.433, 0.446, 0.471, 0.497, 0.516", \
                          "0.414, 0.419, 0.426, 0.438, 0.464, 0.489, 0.508", \
                          "0.399, 0.404, 0.411, 0.424, 0.449, 0.474, 0.493", \
                          "0.369, 0.375, 0.381, 0.394, 0.419, 0.444, 0.463", \
                          "0.340, 0.345, 0.351, 0.364, 0.389, 0.414, 0.433", \
                          "0.317, 0.322, 0.329, 0.341, 0.367, 0.392, 0.411" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_d_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.314, 0.320", \
                          "0.318, 0.320, 0.322, 0.327, 0.335, 0.344, 0.350", \
                          "0.348, 0.350, 0.352, 0.357, 0.365, 0.374, 0.380", \
                          "0.371, 0.373, 0.375, 0.379, 0.388, 0.396, 0.403" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.313, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.321, 0.316, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.336, 0.331, 0.324, 0.312, 0.310, 0.310, 0.310", \
                          "0.366, 0.361, 0.354, 0.341, 0.316, 0.310, 0.310", \
                          "0.396, 0.390, 0.384, 0.371, 0.346, 0.321, 0.310", \
                          "0.418, 0.413, 0.407, 0.394, 0.368, 0.343, 0.324" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_cen_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.478, 0.480, 0.483, 0.488, 0.499, 0.509, 0.517", \
                          "0.472, 0.474, 0.477, 0.482, 0.493, 0.503, 0.511", \
                          "0.465, 0.467, 0.469, 0.475, 0.485, 0.496, 0.504", \
                          "0.450, 0.452, 0.454, 0.460, 0.470, 0.481, 0.489", \
                          "0.420, 0.422, 0.424, 0.430, 0.440, 0.451, 0.459", \
                          "0.390, 0.392, 0.395, 0.400, 0.410, 0.421, 0.429", \
                          "0.367, 0.369, 0.372, 0.377, 0.388, 0.399, 0.407" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.416, 0.417, 0.418, 0.421, 0.427, 0.432, 0.436", \
                          "0.410, 0.411, 0.412, 0.415, 0.421, 0.426, 0.430", \
                          "0.402, 0.404, 0.405, 0.408, 0.413, 0.418, 0.423", \
                          "0.388, 0.389, 0.390, 0.393, 0.398, 0.404, 0.408", \
                          "0.358, 0.359, 0.360, 0.363, 0.368, 0.374, 0.378", \
                          "0.328, 0.329, 0.330, 0.333, 0.338, 0.344, 0.348", \
                          "0.305, 0.306, 0.308, 0.310, 0.316, 0.321, 0.325" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_cen_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.244, 0.242, 0.239, 0.235, 0.235, 0.235, 0.235", \
                          "0.274, 0.271, 0.269, 0.264, 0.253, 0.242, 0.235", \
                          "0.296, 0.294, 0.291, 0.286, 0.275, 0.265, 0.257" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235", \
                          "0.235, 0.235, 0.235, 0.235, 0.235, 0.235, 0.235" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_wen_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.588, 0.591, 0.594, 0.601, 0.615, 0.628, 0.638", \
                          "0.582, 0.585, 0.588, 0.595, 0.609, 0.622, 0.632", \
                          "0.574, 0.577, 0.581, 0.587, 0.601, 0.615, 0.625", \
                          "0.559, 0.562, 0.566, 0.572, 0.586, 0.600, 0.610", \
                          "0.530, 0.532, 0.536, 0.543, 0.556, 0.570, 0.580", \
                          "0.500, 0.502, 0.506, 0.513, 0.526, 0.540, 0.550", \
                          "0.477, 0.480, 0.483, 0.490, 0.504, 0.517, 0.528" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.580, 0.581, 0.583, 0.586, 0.593, 0.600, 0.605", \
                          "0.574, 0.575, 0.577, 0.580, 0.587, 0.594, 0.599", \
                          "0.567, 0.568, 0.570, 0.573, 0.580, 0.586, 0.591", \
                          "0.552, 0.553, 0.555, 0.558, 0.565, 0.571, 0.576", \
                          "0.522, 0.523, 0.525, 0.528, 0.535, 0.541, 0.547", \
                          "0.492, 0.493, 0.495, 0.498, 0.505, 0.512, 0.517", \
                          "0.469, 0.471, 0.472, 0.476, 0.482, 0.489, 0.494" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_wen_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310", \
                          "0.310, 0.310, 0.310, 0.310, 0.310, 0.310, 0.310" \
                        )
                        }
ENDARCDATA


ARCDATA
period_clk_0_B:
                        rise_constraint(scalar) {
                                values ("1.226")
                        }
                        fall_constraint(scalar) {
                                values ("1.226")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_h_0_B:
                        rise_constraint(scalar) {
                                values ("0.073")
                        }
                        fall_constraint(scalar) {
                                values ("0.073")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_l_0_B:
                        rise_constraint(scalar) {
                                values ("0.088")
                        }
                        fall_constraint(scalar) {
                                values ("0.088")
                        }
ENDARCDATA
ARCDATA
dly_clk_q_0_B:
                        cell_rise(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "0.664, 0.683, 0.702, 0.740, 0.816, 0.949, 1.091", \
                          "0.670, 0.689, 0.708, 0.746, 0.822, 0.955, 1.097", \
                          "0.678, 0.697, 0.716, 0.753, 0.830, 0.963, 1.105", \
                          "0.693, 0.712, 0.731, 0.768, 0.845, 0.978, 1.120", \
                          "0.723, 0.742, 0.760, 0.798, 0.875, 1.007, 1.150", \
                          "0.753, 0.772, 0.790, 0.828, 0.905, 1.037, 1.179", \
                          "0.775, 0.794, 0.813, 0.851, 0.927, 1.060, 1.202" \
                        )
                        }
                        rise_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.023, 0.063, 0.104, 0.185, 0.401, 0.778, 1.183")
                        }
                        cell_fall(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "0.664, 0.683, 0.702, 0.740, 0.816, 0.949, 1.091", \
                          "0.670, 0.689, 0.708, 0.746, 0.822, 0.955, 1.097", \
                          "0.678, 0.697, 0.716, 0.753, 0.830, 0.963, 1.105", \
                          "0.693, 0.712, 0.731, 0.768, 0.845, 0.978, 1.120", \
                          "0.723, 0.742, 0.760, 0.798, 0.875, 1.007, 1.150", \
                          "0.753, 0.772, 0.790, 0.828, 0.905, 1.037, 1.179", \
                          "0.775, 0.794, 0.813, 0.851, 0.927, 1.060, 1.202" \
                        )
                        }
                        fall_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.028, 0.056, 0.084, 0.141, 0.290, 0.552, 0.833")
                        }
ENDARCDATA
ARCDATA
cont_cc_A:
                        rise_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891" \
                        )
                        }
                        fall_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891" \
                        )
                        }
ENDARCDATA
ARCDATA
cont_cc_B:
                        rise_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891" \
                        )
                        }
                        fall_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891", \
                          "0.891, 0.891, 0.891, 0.891, 0.891, 0.891, 0.891" \
                        )
                        }
ENDARCDATA
ENDTIMINGDATA
ENDMODELDATA
