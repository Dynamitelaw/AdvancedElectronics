/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2019  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Dual Port SRAM Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2009Q1V1
 *      comment:		
 *      configuration:	 -instname CacheMem -words 256 -bits 6 -frequency 1 -ring_width 4.0 -mux 8 -write_mask off -wp_size 8 -top_layer "met5-8" -power_type rings -horiz met1 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 6 -dpccm on -asvm on -libname USERLIB -corners ff_1p32v_m40c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_125c
 *
 *      Synopsys model for Synchronous Dual-Port Ram
 *
 *      Library Name:   USERLIB
 *      Instance Name:  CacheMem
 *      Words:          256
 *      Word Width:     6
 *      Mux:            8
 *      Corner:        ff_1p32v_m40c
 *
 *      Creation Date:  2019-04-26 05:34:11Z
 *      Version:        2009Q1V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2019-04-26 05:34:11Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2019 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: -40.000;
	nom_voltage		: 1.320;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 0.750;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(ff_1p32v_m40c) {
		process	 : 1;
		temperature	 : -40.000;
		voltage	 : 1.320;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : ff_1p32v_m40c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(CacheMem_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(CacheMem_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(CacheMem_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(CacheMem_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(CacheMem_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(CacheMem_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(CacheMem_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(CacheMem_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (CacheMem_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 6;
		bit_from : 5;
		bit_to : 0 ;
		downto : true ;
	}
	type (CacheMem_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (CacheMem_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
cell(CacheMem) {
	area		 : 41173.920;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 8;
		word_width : 6;
	}
        bus(QA)   {
                bus_type : CacheMem_DATA;
		direction : output;
		max_capacitance : 0.860;
                memory_read() {
			address : AA;
		}
                timing() {
                        related_pin :   "CLKA" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "0.881, 0.903, 0.926, 0.971, 1.061, 1.216, 1.382", \
                          "0.892, 0.915, 0.937, 0.983, 1.072, 1.228, 1.394", \
                          "0.907, 0.929, 0.952, 0.997, 1.087, 1.242, 1.408", \
                          "0.935, 0.958, 0.981, 1.026, 1.116, 1.271, 1.437", \
                          "0.993, 1.016, 1.038, 1.084, 1.173, 1.328, 1.495", \
                          "1.050, 1.073, 1.096, 1.141, 1.231, 1.386, 1.552", \
                          "1.094, 1.116, 1.139, 1.184, 1.274, 1.429, 1.595" \
                        )
                        }
                        rise_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.022, 0.067, 0.113, 0.204, 0.446, 0.871, 1.326")
                        }
                        cell_fall(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "0.881, 0.903, 0.926, 0.971, 1.061, 1.216, 1.382", \
                          "0.892, 0.915, 0.937, 0.983, 1.072, 1.228, 1.394", \
                          "0.907, 0.929, 0.952, 0.997, 1.087, 1.242, 1.408", \
                          "0.935, 0.958, 0.981, 1.026, 1.116, 1.271, 1.437", \
                          "0.993, 1.016, 1.038, 1.084, 1.173, 1.328, 1.495", \
                          "1.050, 1.073, 1.096, 1.141, 1.231, 1.386, 1.552", \
                          "1.094, 1.116, 1.139, 1.184, 1.274, 1.429, 1.595" \
                        )
                        }
                        fall_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.026, 0.058, 0.089, 0.151, 0.317, 0.608, 0.920")
                        }
                }
        }
        bus(QB)   {
                bus_type : CacheMem_DATA;
		direction : output;
		max_capacitance : 0.860;
                memory_read() {
			address : AB;
		}
                timing() {
                        related_pin :   "CLKB" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "0.881, 0.903, 0.926, 0.971, 1.061, 1.216, 1.382", \
                          "0.892, 0.915, 0.937, 0.983, 1.072, 1.228, 1.394", \
                          "0.907, 0.929, 0.952, 0.997, 1.087, 1.242, 1.408", \
                          "0.935, 0.958, 0.981, 1.026, 1.116, 1.271, 1.437", \
                          "0.993, 1.016, 1.038, 1.084, 1.173, 1.328, 1.495", \
                          "1.050, 1.073, 1.096, 1.141, 1.231, 1.386, 1.552", \
                          "1.094, 1.116, 1.139, 1.184, 1.274, 1.429, 1.595" \
                        )
                        }
                        rise_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.022, 0.067, 0.113, 0.204, 0.446, 0.871, 1.326")
                        }
                        cell_fall(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "0.881, 0.903, 0.926, 0.971, 1.061, 1.216, 1.382", \
                          "0.892, 0.915, 0.937, 0.983, 1.072, 1.228, 1.394", \
                          "0.907, 0.929, 0.952, 0.997, 1.087, 1.242, 1.408", \
                          "0.935, 0.958, 0.981, 1.026, 1.116, 1.271, 1.437", \
                          "0.993, 1.016, 1.038, 1.084, 1.173, 1.328, 1.495", \
                          "1.050, 1.073, 1.096, 1.141, 1.231, 1.386, 1.552", \
                          "1.094, 1.116, 1.139, 1.184, 1.274, 1.429, 1.595" \
                        )
                        }
                        fall_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.026, 0.058, 0.089, 0.151, 0.317, 0.608, 0.920")
                        }
                }
        }
        pin(CLKA)   {
		direction : input;
		capacitance : 0.122;
                clock : true;
                max_transition : 0.750;
                timing() {
                        related_pin     : "CLKB" ;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846", \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846", \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846", \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846", \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846", \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846", \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846" \
                        )
                        }
                 }
                min_pulse_width_high : 0.088 ;
                min_pulse_width_low  : 0.117 ;
                min_period           : 1.344 ;


                internal_power(){
                        when : "(!CENA & ! \
                                 (WENA) \
                                ) \
                                 ";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("24.460, 24.460")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CENA & \
                                 (WENA) \
                                ) \
                                 ";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("19.357, 19.357")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CENA)";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.014, 0.014")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CENA)   {
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLKA;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.630, 0.636, 0.643, 0.657, 0.686, 0.715, 0.737", \
                          "0.619, 0.624, 0.632, 0.646, 0.675, 0.703, 0.725", \
                          "0.604, 0.610, 0.617, 0.632, 0.660, 0.689, 0.711", \
                          "0.575, 0.581, 0.588, 0.603, 0.632, 0.660, 0.682", \
                          "0.518, 0.524, 0.531, 0.545, 0.574, 0.603, 0.624", \
                          "0.460, 0.466, 0.473, 0.488, 0.516, 0.545, 0.567", \
                          "0.417, 0.423, 0.430, 0.444, 0.473, 0.502, 0.524" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.563, 0.565, 0.567, 0.571, 0.580, 0.588, 0.595", \
                          "0.551, 0.553, 0.555, 0.560, 0.568, 0.577, 0.583", \
                          "0.537, 0.539, 0.541, 0.545, 0.554, 0.562, 0.569", \
                          "0.508, 0.510, 0.512, 0.516, 0.525, 0.534, 0.540", \
                          "0.451, 0.452, 0.455, 0.459, 0.467, 0.476, 0.483", \
                          "0.393, 0.395, 0.397, 0.401, 0.410, 0.418, 0.425", \
                          "0.350, 0.352, 0.354, 0.358, 0.367, 0.375, 0.382" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKA;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.371, 0.365, 0.358, 0.343, 0.330, 0.330, 0.330", \
                          "0.428, 0.423, 0.415, 0.401, 0.372, 0.343, 0.330", \
                          "0.471, 0.466, 0.459, 0.444, 0.415, 0.387, 0.365" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.351, 0.349, 0.347, 0.343, 0.334, 0.330, 0.330" \
                        )
                        }
               }
        }
        pin(WENA){
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLKA;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.729, 0.735, 0.744, 0.761, 0.796, 0.830, 0.856", \
                          "0.717, 0.724, 0.733, 0.750, 0.784, 0.819, 0.845", \
                          "0.703, 0.710, 0.718, 0.735, 0.770, 0.804, 0.830", \
                          "0.674, 0.681, 0.689, 0.707, 0.741, 0.776, 0.801", \
                          "0.616, 0.623, 0.632, 0.649, 0.684, 0.718, 0.744", \
                          "0.559, 0.566, 0.574, 0.591, 0.626, 0.660, 0.686", \
                          "0.516, 0.522, 0.531, 0.548, 0.583, 0.617, 0.643" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.741, 0.743, 0.746, 0.752, 0.765, 0.777, 0.786", \
                          "0.729, 0.732, 0.735, 0.741, 0.753, 0.766, 0.775", \
                          "0.715, 0.717, 0.720, 0.726, 0.739, 0.751, 0.761", \
                          "0.686, 0.688, 0.691, 0.698, 0.710, 0.722, 0.732", \
                          "0.628, 0.631, 0.634, 0.640, 0.652, 0.665, 0.674", \
                          "0.571, 0.573, 0.576, 0.582, 0.595, 0.607, 0.617", \
                          "0.528, 0.530, 0.533, 0.539, 0.552, 0.564, 0.573" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKA;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
               }
        }
        bus(AA)   {
                bus_type : CacheMem_ADDRESS;
                direction : input;
                capacitance : 0.016;
                timing() {
                        related_pin     : CLKA;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.489, 0.492, 0.496, 0.504, 0.519, 0.535, 0.546", \
                          "0.477, 0.480, 0.484, 0.492, 0.508, 0.523, 0.535", \
                          "0.463, 0.466, 0.470, 0.478, 0.493, 0.509, 0.521", \
                          "0.434, 0.437, 0.441, 0.449, 0.465, 0.480, 0.492", \
                          "0.377, 0.380, 0.384, 0.391, 0.407, 0.423, 0.434", \
                          "0.319, 0.322, 0.326, 0.334, 0.349, 0.365, 0.377", \
                          "0.276, 0.279, 0.283, 0.291, 0.306, 0.322, 0.333" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.412, 0.414, 0.416, 0.420, 0.428, 0.436, 0.443", \
                          "0.401, 0.403, 0.405, 0.409, 0.417, 0.425, 0.431", \
                          "0.387, 0.388, 0.390, 0.394, 0.402, 0.411, 0.417", \
                          "0.358, 0.359, 0.361, 0.366, 0.374, 0.382, 0.388", \
                          "0.300, 0.302, 0.304, 0.308, 0.316, 0.324, 0.330", \
                          "0.243, 0.244, 0.246, 0.250, 0.259, 0.267, 0.273", \
                          "0.210, 0.210, 0.210, 0.210, 0.215, 0.223, 0.230" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKA;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.240, 0.237, 0.233, 0.225, 0.210, 0.210, 0.210", \
                          "0.298, 0.294, 0.291, 0.283, 0.267, 0.252, 0.240", \
                          "0.341, 0.338, 0.334, 0.326, 0.310, 0.295, 0.283" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.232, 0.230, 0.228, 0.224, 0.216, 0.210, 0.210", \
                          "0.290, 0.288, 0.286, 0.282, 0.274, 0.266, 0.259", \
                          "0.347, 0.345, 0.343, 0.339, 0.331, 0.323, 0.317", \
                          "0.390, 0.389, 0.387, 0.383, 0.374, 0.366, 0.360" \
                        )
                        }
               }
                internal_power(){
                        when : "CENA";
                        rise_power(CacheMem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.253, 0.253")
                        }
                        fall_power(CacheMem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.253, 0.253")
                        }
                }
        }
        bus(DA)   {
                bus_type : CacheMem_DATA;
                memory_write() {
                        address : AA;
                        clocked_on : "CLKA";
                }
                direction : input;
                capacitance : 0.001;
                timing() {
                        related_pin     : CLKA;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.557, 0.558, 0.560, 0.563, 0.568, 0.574, 0.579", \
                          "0.546, 0.547, 0.548, 0.551, 0.557, 0.563, 0.567", \
                          "0.531, 0.532, 0.534, 0.537, 0.542, 0.548, 0.553", \
                          "0.502, 0.504, 0.505, 0.508, 0.514, 0.519, 0.524", \
                          "0.445, 0.446, 0.447, 0.450, 0.456, 0.462, 0.466", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.575, 0.578, 0.583, 0.591, 0.608, 0.626, 0.639", \
                          "0.563, 0.567, 0.571, 0.580, 0.597, 0.614, 0.627", \
                          "0.549, 0.552, 0.557, 0.565, 0.583, 0.600, 0.613", \
                          "0.520, 0.524, 0.528, 0.536, 0.554, 0.571, 0.584", \
                          "0.463, 0.466, 0.470, 0.479, 0.496, 0.513, 0.526", \
                          "0.410, 0.410, 0.413, 0.421, 0.439, 0.456, 0.469", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.413, 0.426" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKA;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.417, 0.416, 0.414, 0.412, 0.410, 0.410, 0.410", \
                          "0.475, 0.473, 0.472, 0.469, 0.463, 0.458, 0.453", \
                          "0.518, 0.517, 0.515, 0.512, 0.506, 0.501, 0.496" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.465, 0.462, 0.457, 0.449, 0.432, 0.414, 0.410", \
                          "0.523, 0.519, 0.515, 0.506, 0.489, 0.472, 0.459", \
                          "0.566, 0.563, 0.558, 0.550, 0.532, 0.515, 0.502" \
                        )
                        }
               }
        }
        pin(CLKB)   {
		direction : input;
		capacitance : 0.122;
                clock : true;
                max_transition : 0.750;
                timing() {
                        related_pin     : "CLKA" ;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846", \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846", \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846", \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846", \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846", \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846", \
                          "0.846, 0.846, 0.846, 0.846, 0.846, 0.846, 0.846" \
                        )
                        }
                 }
                min_pulse_width_high : 0.088 ;
                min_pulse_width_low  : 0.117 ;
                min_period           : 1.344 ;


                internal_power(){
                        when : "(!CENB & ! \
                                 (WENB) \
                                ) \
                                 ";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("24.460, 24.460")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CENB & \
                                 (WENB) \
                                ) \
                                 ";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("19.357, 19.357")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CENB)";
                        rise_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.014, 0.014")
                        }
                        fall_power(CacheMem_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CENB)   {
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLKB;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.630, 0.636, 0.643, 0.657, 0.686, 0.715, 0.737", \
                          "0.619, 0.624, 0.632, 0.646, 0.675, 0.703, 0.725", \
                          "0.604, 0.610, 0.617, 0.632, 0.660, 0.689, 0.711", \
                          "0.575, 0.581, 0.588, 0.603, 0.632, 0.660, 0.682", \
                          "0.518, 0.524, 0.531, 0.545, 0.574, 0.603, 0.624", \
                          "0.460, 0.466, 0.473, 0.488, 0.516, 0.545, 0.567", \
                          "0.417, 0.423, 0.430, 0.444, 0.473, 0.502, 0.524" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.563, 0.565, 0.567, 0.571, 0.580, 0.588, 0.595", \
                          "0.551, 0.553, 0.555, 0.560, 0.568, 0.577, 0.583", \
                          "0.537, 0.539, 0.541, 0.545, 0.554, 0.562, 0.569", \
                          "0.508, 0.510, 0.512, 0.516, 0.525, 0.534, 0.540", \
                          "0.451, 0.452, 0.455, 0.459, 0.467, 0.476, 0.483", \
                          "0.393, 0.395, 0.397, 0.401, 0.410, 0.418, 0.425", \
                          "0.350, 0.352, 0.354, 0.358, 0.367, 0.375, 0.382" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKB;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.371, 0.365, 0.358, 0.343, 0.330, 0.330, 0.330", \
                          "0.428, 0.423, 0.415, 0.401, 0.372, 0.343, 0.330", \
                          "0.471, 0.466, 0.459, 0.444, 0.415, 0.387, 0.365" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.351, 0.349, 0.347, 0.343, 0.334, 0.330, 0.330" \
                        )
                        }
               }
        }
        pin(WENB){
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLKB;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.729, 0.735, 0.744, 0.761, 0.796, 0.830, 0.856", \
                          "0.717, 0.724, 0.733, 0.750, 0.784, 0.819, 0.845", \
                          "0.703, 0.710, 0.718, 0.735, 0.770, 0.804, 0.830", \
                          "0.674, 0.681, 0.689, 0.707, 0.741, 0.776, 0.801", \
                          "0.616, 0.623, 0.632, 0.649, 0.684, 0.718, 0.744", \
                          "0.559, 0.566, 0.574, 0.591, 0.626, 0.660, 0.686", \
                          "0.516, 0.522, 0.531, 0.548, 0.583, 0.617, 0.643" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.741, 0.743, 0.746, 0.752, 0.765, 0.777, 0.786", \
                          "0.729, 0.732, 0.735, 0.741, 0.753, 0.766, 0.775", \
                          "0.715, 0.717, 0.720, 0.726, 0.739, 0.751, 0.761", \
                          "0.686, 0.688, 0.691, 0.698, 0.710, 0.722, 0.732", \
                          "0.628, 0.631, 0.634, 0.640, 0.652, 0.665, 0.674", \
                          "0.571, 0.573, 0.576, 0.582, 0.595, 0.607, 0.617", \
                          "0.528, 0.530, 0.533, 0.539, 0.552, 0.564, 0.573" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKB;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
               }
        }
        bus(AB)   {
                bus_type : CacheMem_ADDRESS;
                direction : input;
                capacitance : 0.016;
                timing() {
                        related_pin     : CLKB;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.489, 0.492, 0.496, 0.504, 0.519, 0.535, 0.546", \
                          "0.477, 0.480, 0.484, 0.492, 0.508, 0.523, 0.535", \
                          "0.463, 0.466, 0.470, 0.478, 0.493, 0.509, 0.521", \
                          "0.434, 0.437, 0.441, 0.449, 0.465, 0.480, 0.492", \
                          "0.377, 0.380, 0.384, 0.391, 0.407, 0.423, 0.434", \
                          "0.319, 0.322, 0.326, 0.334, 0.349, 0.365, 0.377", \
                          "0.276, 0.279, 0.283, 0.291, 0.306, 0.322, 0.333" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.412, 0.414, 0.416, 0.420, 0.428, 0.436, 0.443", \
                          "0.401, 0.403, 0.405, 0.409, 0.417, 0.425, 0.431", \
                          "0.387, 0.388, 0.390, 0.394, 0.402, 0.411, 0.417", \
                          "0.358, 0.359, 0.361, 0.366, 0.374, 0.382, 0.388", \
                          "0.300, 0.302, 0.304, 0.308, 0.316, 0.324, 0.330", \
                          "0.243, 0.244, 0.246, 0.250, 0.259, 0.267, 0.273", \
                          "0.210, 0.210, 0.210, 0.210, 0.215, 0.223, 0.230" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKB;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.240, 0.237, 0.233, 0.225, 0.210, 0.210, 0.210", \
                          "0.298, 0.294, 0.291, 0.283, 0.267, 0.252, 0.240", \
                          "0.341, 0.338, 0.334, 0.326, 0.310, 0.295, 0.283" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.232, 0.230, 0.228, 0.224, 0.216, 0.210, 0.210", \
                          "0.290, 0.288, 0.286, 0.282, 0.274, 0.266, 0.259", \
                          "0.347, 0.345, 0.343, 0.339, 0.331, 0.323, 0.317", \
                          "0.390, 0.389, 0.387, 0.383, 0.374, 0.366, 0.360" \
                        )
                        }
               }
                internal_power(){
                        when : "CENB";
                        rise_power(CacheMem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.253, 0.253")
                        }
                        fall_power(CacheMem_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.253, 0.253")
                        }
                }
        }
        bus(DB)   {
                bus_type : CacheMem_DATA;
                memory_write() {
                        address : AB;
                        clocked_on : "CLKB";
                }
                direction : input;
                capacitance : 0.001;
                timing() {
                        related_pin     : CLKB;
                        timing_type     : setup_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.557, 0.558, 0.560, 0.563, 0.568, 0.574, 0.579", \
                          "0.546, 0.547, 0.548, 0.551, 0.557, 0.563, 0.567", \
                          "0.531, 0.532, 0.534, 0.537, 0.542, 0.548, 0.553", \
                          "0.502, 0.504, 0.505, 0.508, 0.514, 0.519, 0.524", \
                          "0.445, 0.446, 0.447, 0.450, 0.456, 0.462, 0.466", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.575, 0.578, 0.583, 0.591, 0.608, 0.626, 0.639", \
                          "0.563, 0.567, 0.571, 0.580, 0.597, 0.614, 0.627", \
                          "0.549, 0.552, 0.557, 0.565, 0.583, 0.600, 0.613", \
                          "0.520, 0.524, 0.528, 0.536, 0.554, 0.571, 0.584", \
                          "0.463, 0.466, 0.470, 0.479, 0.496, 0.513, 0.526", \
                          "0.410, 0.410, 0.413, 0.421, 0.439, 0.456, 0.469", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.413, 0.426" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLKB;
                        timing_type     : hold_rising ;
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.417, 0.416, 0.414, 0.412, 0.410, 0.410, 0.410", \
                          "0.475, 0.473, 0.472, 0.469, 0.463, 0.458, 0.453", \
                          "0.518, 0.517, 0.515, 0.512, 0.506, 0.501, 0.496" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.465, 0.462, 0.457, 0.449, 0.432, 0.414, 0.410", \
                          "0.523, 0.519, 0.515, 0.506, 0.489, 0.472, 0.459", \
                          "0.566, 0.563, 0.558, 0.550, 0.532, 0.515, 0.502" \
                        )
                        }
               }
        }

        cell_leakage_power : 3.82E-4;
}
}
