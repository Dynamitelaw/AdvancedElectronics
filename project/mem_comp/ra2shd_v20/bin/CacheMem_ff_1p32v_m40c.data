/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2019  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Dual Port SRAM Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2009Q1V1
 *      comment:		
 *      configuration:	 -instname CacheMem -words 256 -bits 32 -frequency 1000 -ring_width 4.0 -mux 8 -write_mask off -wp_size 8 -top_layer "met5-8" -power_type rings -horiz met3 -vert met4 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 6 -dpccm on -asvm on -corners ff_1p32v_m40c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_125c
 *
 *      Synopsys model for Synchronous Dual-Port Ram
 *
 *      Library Name:   aci
 *      Instance Name:  CacheMem
 *      Words:          256
 *      Word Width:     32
 *      Mux:            8
 *      Process:        ff_1p32v_m40c
 *
 *      Creation Date:  2019-05-01 00:28:09Z
 *      Version:        2009Q1V1
 *
 *      Verified With: Synopsys Primetime
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.
 *          Different modes are defined in order to disable false path
 *          during the specific mode activation when doing static timing analysis. 
 *
 *
 *      Modeling Limitations: This stamp does not include power information.
 *          Due to limitations of the stamp modeling, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

MODELDATA
OPERATING_CONDITION "ff_1p32v_m40c";
DESIGN              "CacheMem";

CELLDATA
area                   : 125758.368;
default_max_transition : 0.750;
ENDCELLDATA

PORTDATA
QA[31:0] : MAXCAP(0.860);
AA[7:0] : CAP(0.016);
DA[31:0] : CAP(0.001);
CLKA : CAP(0.122), MAXTRANS(0.750);
WENA : CAP(0.008);
CENA : CAP(0.008);
QB[31:0] : MAXCAP(0.860);
AB[7:0] : CAP(0.016);
DB[31:0] : CAP(0.001);
CLKB : CAP(0.122), MAXTRANS(0.750);
WENB : CAP(0.008);
CENB : CAP(0.008);
ENDPORTDATA

TIMINGDATA
GLOBAL
        lu_table_template(CacheMem_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(CacheMem_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(CacheMem_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(CacheMem_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
ENDGLOBAL
ARCDATA
setup_a_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.466, 0.469, 0.473, 0.481, 0.496, 0.512, 0.523", \
                          "0.454, 0.457, 0.461, 0.469, 0.485, 0.500, 0.512", \
                          "0.440, 0.443, 0.447, 0.455, 0.470, 0.486, 0.498", \
                          "0.411, 0.414, 0.418, 0.426, 0.441, 0.457, 0.469", \
                          "0.354, 0.357, 0.361, 0.368, 0.384, 0.399, 0.411", \
                          "0.296, 0.299, 0.303, 0.311, 0.326, 0.342, 0.354", \
                          "0.253, 0.256, 0.260, 0.268, 0.283, 0.299, 0.310" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.418, 0.419, 0.421, 0.425, 0.433, 0.442, 0.448", \
                          "0.406, 0.408, 0.410, 0.414, 0.422, 0.430, 0.436", \
                          "0.392, 0.393, 0.395, 0.399, 0.408, 0.416, 0.422", \
                          "0.363, 0.364, 0.367, 0.371, 0.379, 0.387, 0.393", \
                          "0.305, 0.307, 0.309, 0.313, 0.321, 0.329, 0.335", \
                          "0.248, 0.249, 0.251, 0.255, 0.264, 0.272, 0.278", \
                          "0.210, 0.210, 0.210, 0.212, 0.220, 0.229, 0.235" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_a_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.240, 0.237, 0.233, 0.225, 0.210, 0.210, 0.210", \
                          "0.297, 0.294, 0.290, 0.282, 0.267, 0.251, 0.240", \
                          "0.340, 0.337, 0.333, 0.326, 0.310, 0.294, 0.283" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.233, 0.231, 0.229, 0.225, 0.217, 0.210, 0.210", \
                          "0.290, 0.288, 0.286, 0.282, 0.274, 0.266, 0.260", \
                          "0.348, 0.346, 0.344, 0.340, 0.332, 0.324, 0.318", \
                          "0.391, 0.389, 0.387, 0.383, 0.375, 0.367, 0.361" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_d_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.556, 0.557, 0.559, 0.561, 0.567, 0.573, 0.577", \
                          "0.544, 0.546, 0.547, 0.550, 0.556, 0.562, 0.566", \
                          "0.530, 0.531, 0.533, 0.536, 0.541, 0.547, 0.551", \
                          "0.501, 0.502, 0.504, 0.507, 0.513, 0.518, 0.523", \
                          "0.444, 0.445, 0.446, 0.449, 0.455, 0.461, 0.465", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.557, 0.560, 0.564, 0.573, 0.590, 0.608, 0.621", \
                          "0.545, 0.549, 0.553, 0.562, 0.579, 0.596, 0.609", \
                          "0.531, 0.534, 0.539, 0.547, 0.564, 0.582, 0.595", \
                          "0.502, 0.505, 0.510, 0.518, 0.536, 0.553, 0.566", \
                          "0.444, 0.448, 0.452, 0.461, 0.478, 0.495, 0.508", \
                          "0.410, 0.410, 0.410, 0.410, 0.420, 0.438, 0.451", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_d_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.428, 0.427, 0.426, 0.423, 0.417, 0.411, 0.410", \
                          "0.486, 0.485, 0.483, 0.480, 0.475, 0.469, 0.465", \
                          "0.529, 0.528, 0.527, 0.524, 0.518, 0.512, 0.508" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.436, 0.432, 0.428, 0.419, 0.410, 0.410, 0.410", \
                          "0.493, 0.490, 0.485, 0.477, 0.460, 0.442, 0.429", \
                          "0.551, 0.547, 0.543, 0.534, 0.517, 0.500, 0.487", \
                          "0.594, 0.590, 0.586, 0.578, 0.560, 0.543, 0.530" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_cen_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.630, 0.636, 0.643, 0.657, 0.686, 0.715, 0.737", \
                          "0.619, 0.624, 0.632, 0.646, 0.675, 0.703, 0.725", \
                          "0.604, 0.610, 0.617, 0.632, 0.660, 0.689, 0.711", \
                          "0.575, 0.581, 0.588, 0.603, 0.632, 0.660, 0.682", \
                          "0.518, 0.524, 0.531, 0.545, 0.574, 0.603, 0.624", \
                          "0.460, 0.466, 0.473, 0.488, 0.516, 0.545, 0.567", \
                          "0.417, 0.423, 0.430, 0.444, 0.473, 0.502, 0.524" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.563, 0.565, 0.567, 0.571, 0.580, 0.588, 0.595", \
                          "0.551, 0.553, 0.555, 0.560, 0.568, 0.577, 0.583", \
                          "0.537, 0.539, 0.541, 0.545, 0.554, 0.562, 0.569", \
                          "0.508, 0.510, 0.512, 0.516, 0.525, 0.534, 0.540", \
                          "0.451, 0.452, 0.455, 0.459, 0.467, 0.476, 0.483", \
                          "0.393, 0.395, 0.397, 0.401, 0.410, 0.418, 0.425", \
                          "0.350, 0.352, 0.354, 0.358, 0.367, 0.375, 0.382" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_cen_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.371, 0.365, 0.358, 0.343, 0.330, 0.330, 0.330", \
                          "0.428, 0.423, 0.415, 0.401, 0.372, 0.343, 0.330", \
                          "0.471, 0.466, 0.459, 0.444, 0.415, 0.387, 0.365" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.351, 0.349, 0.347, 0.343, 0.334, 0.330, 0.330" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_wen_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.743, 0.750, 0.758, 0.776, 0.810, 0.845, 0.870", \
                          "0.731, 0.738, 0.747, 0.764, 0.799, 0.833, 0.859", \
                          "0.717, 0.724, 0.732, 0.750, 0.784, 0.819, 0.845", \
                          "0.688, 0.695, 0.704, 0.721, 0.755, 0.790, 0.816", \
                          "0.631, 0.638, 0.646, 0.663, 0.698, 0.732, 0.758", \
                          "0.573, 0.580, 0.589, 0.606, 0.640, 0.675, 0.701", \
                          "0.530, 0.537, 0.545, 0.563, 0.597, 0.632, 0.657" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.772, 0.774, 0.777, 0.783, 0.796, 0.808, 0.818", \
                          "0.760, 0.763, 0.766, 0.772, 0.784, 0.797, 0.806", \
                          "0.746, 0.748, 0.751, 0.758, 0.770, 0.782, 0.792", \
                          "0.717, 0.719, 0.723, 0.729, 0.741, 0.754, 0.763", \
                          "0.659, 0.662, 0.665, 0.671, 0.684, 0.696, 0.705", \
                          "0.602, 0.604, 0.607, 0.614, 0.626, 0.638, 0.648", \
                          "0.559, 0.561, 0.564, 0.570, 0.583, 0.595, 0.605" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_wen_A:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
ENDARCDATA


ARCDATA
period_clk_0_A:
                        rise_constraint(scalar) {
                                values ("1.422")
                        }
                        fall_constraint(scalar) {
                                values ("1.422")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_h_0_A:
                        rise_constraint(scalar) {
                                values ("0.088")
                        }
                        fall_constraint(scalar) {
                                values ("0.088")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_l_0_A:
                        rise_constraint(scalar) {
                                values ("0.117")
                        }
                        fall_constraint(scalar) {
                                values ("0.117")
                        }
ENDARCDATA
ARCDATA
dly_clk_q_0_A:
                        cell_rise(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "0.918, 0.941, 0.964, 1.009, 1.099, 1.254, 1.421", \
                          "0.930, 0.953, 0.975, 1.021, 1.111, 1.266, 1.432", \
                          "0.944, 0.967, 0.990, 1.035, 1.125, 1.280, 1.447", \
                          "0.973, 0.996, 1.018, 1.064, 1.154, 1.309, 1.475", \
                          "1.031, 1.053, 1.076, 1.121, 1.212, 1.367, 1.533", \
                          "1.088, 1.111, 1.134, 1.179, 1.269, 1.424, 1.591", \
                          "1.131, 1.154, 1.177, 1.222, 1.312, 1.468, 1.634" \
                        )
                        }
                        rise_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.022, 0.067, 0.113, 0.204, 0.446, 0.871, 1.326")
                        }
                        cell_fall(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "0.918, 0.941, 0.964, 1.009, 1.099, 1.254, 1.421", \
                          "0.930, 0.953, 0.975, 1.021, 1.111, 1.266, 1.432", \
                          "0.944, 0.967, 0.990, 1.035, 1.125, 1.280, 1.447", \
                          "0.973, 0.996, 1.018, 1.064, 1.154, 1.309, 1.475", \
                          "1.031, 1.053, 1.076, 1.121, 1.212, 1.367, 1.533", \
                          "1.088, 1.111, 1.134, 1.179, 1.269, 1.424, 1.591", \
                          "1.131, 1.154, 1.177, 1.222, 1.312, 1.468, 1.634" \
                        )
                        }
                        fall_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.026, 0.058, 0.089, 0.151, 0.317, 0.608, 0.920")
                        }
ENDARCDATA
ARCDATA
setup_a_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.466, 0.469, 0.473, 0.481, 0.496, 0.512, 0.523", \
                          "0.454, 0.457, 0.461, 0.469, 0.485, 0.500, 0.512", \
                          "0.440, 0.443, 0.447, 0.455, 0.470, 0.486, 0.498", \
                          "0.411, 0.414, 0.418, 0.426, 0.441, 0.457, 0.469", \
                          "0.354, 0.357, 0.361, 0.368, 0.384, 0.399, 0.411", \
                          "0.296, 0.299, 0.303, 0.311, 0.326, 0.342, 0.354", \
                          "0.253, 0.256, 0.260, 0.268, 0.283, 0.299, 0.310" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.418, 0.419, 0.421, 0.425, 0.433, 0.442, 0.448", \
                          "0.406, 0.408, 0.410, 0.414, 0.422, 0.430, 0.436", \
                          "0.392, 0.393, 0.395, 0.399, 0.408, 0.416, 0.422", \
                          "0.363, 0.364, 0.367, 0.371, 0.379, 0.387, 0.393", \
                          "0.305, 0.307, 0.309, 0.313, 0.321, 0.329, 0.335", \
                          "0.248, 0.249, 0.251, 0.255, 0.264, 0.272, 0.278", \
                          "0.210, 0.210, 0.210, 0.212, 0.220, 0.229, 0.235" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_a_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.240, 0.237, 0.233, 0.225, 0.210, 0.210, 0.210", \
                          "0.297, 0.294, 0.290, 0.282, 0.267, 0.251, 0.240", \
                          "0.340, 0.337, 0.333, 0.326, 0.310, 0.294, 0.283" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.210, 0.210, 0.210, 0.210, 0.210, 0.210, 0.210", \
                          "0.233, 0.231, 0.229, 0.225, 0.217, 0.210, 0.210", \
                          "0.290, 0.288, 0.286, 0.282, 0.274, 0.266, 0.260", \
                          "0.348, 0.346, 0.344, 0.340, 0.332, 0.324, 0.318", \
                          "0.391, 0.389, 0.387, 0.383, 0.375, 0.367, 0.361" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_d_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.556, 0.557, 0.559, 0.561, 0.567, 0.573, 0.577", \
                          "0.544, 0.546, 0.547, 0.550, 0.556, 0.562, 0.566", \
                          "0.530, 0.531, 0.533, 0.536, 0.541, 0.547, 0.551", \
                          "0.501, 0.502, 0.504, 0.507, 0.513, 0.518, 0.523", \
                          "0.444, 0.445, 0.446, 0.449, 0.455, 0.461, 0.465", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.557, 0.560, 0.564, 0.573, 0.590, 0.608, 0.621", \
                          "0.545, 0.549, 0.553, 0.562, 0.579, 0.596, 0.609", \
                          "0.531, 0.534, 0.539, 0.547, 0.564, 0.582, 0.595", \
                          "0.502, 0.505, 0.510, 0.518, 0.536, 0.553, 0.566", \
                          "0.444, 0.448, 0.452, 0.461, 0.478, 0.495, 0.508", \
                          "0.410, 0.410, 0.410, 0.410, 0.420, 0.438, 0.451", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_d_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.428, 0.427, 0.426, 0.423, 0.417, 0.411, 0.410", \
                          "0.486, 0.485, 0.483, 0.480, 0.475, 0.469, 0.465", \
                          "0.529, 0.528, 0.527, 0.524, 0.518, 0.512, 0.508" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.436, 0.432, 0.428, 0.419, 0.410, 0.410, 0.410", \
                          "0.493, 0.490, 0.485, 0.477, 0.460, 0.442, 0.429", \
                          "0.551, 0.547, 0.543, 0.534, 0.517, 0.500, 0.487", \
                          "0.594, 0.590, 0.586, 0.578, 0.560, 0.543, 0.530" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_cen_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.630, 0.636, 0.643, 0.657, 0.686, 0.715, 0.737", \
                          "0.619, 0.624, 0.632, 0.646, 0.675, 0.703, 0.725", \
                          "0.604, 0.610, 0.617, 0.632, 0.660, 0.689, 0.711", \
                          "0.575, 0.581, 0.588, 0.603, 0.632, 0.660, 0.682", \
                          "0.518, 0.524, 0.531, 0.545, 0.574, 0.603, 0.624", \
                          "0.460, 0.466, 0.473, 0.488, 0.516, 0.545, 0.567", \
                          "0.417, 0.423, 0.430, 0.444, 0.473, 0.502, 0.524" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.563, 0.565, 0.567, 0.571, 0.580, 0.588, 0.595", \
                          "0.551, 0.553, 0.555, 0.560, 0.568, 0.577, 0.583", \
                          "0.537, 0.539, 0.541, 0.545, 0.554, 0.562, 0.569", \
                          "0.508, 0.510, 0.512, 0.516, 0.525, 0.534, 0.540", \
                          "0.451, 0.452, 0.455, 0.459, 0.467, 0.476, 0.483", \
                          "0.393, 0.395, 0.397, 0.401, 0.410, 0.418, 0.425", \
                          "0.350, 0.352, 0.354, 0.358, 0.367, 0.375, 0.382" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_cen_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.371, 0.365, 0.358, 0.343, 0.330, 0.330, 0.330", \
                          "0.428, 0.423, 0.415, 0.401, 0.372, 0.343, 0.330", \
                          "0.471, 0.466, 0.459, 0.444, 0.415, 0.387, 0.365" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.330, 0.330, 0.330, 0.330, 0.330, 0.330, 0.330", \
                          "0.351, 0.349, 0.347, 0.343, 0.334, 0.330, 0.330" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_wen_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.743, 0.750, 0.758, 0.776, 0.810, 0.845, 0.870", \
                          "0.731, 0.738, 0.747, 0.764, 0.799, 0.833, 0.859", \
                          "0.717, 0.724, 0.732, 0.750, 0.784, 0.819, 0.845", \
                          "0.688, 0.695, 0.704, 0.721, 0.755, 0.790, 0.816", \
                          "0.631, 0.638, 0.646, 0.663, 0.698, 0.732, 0.758", \
                          "0.573, 0.580, 0.589, 0.606, 0.640, 0.675, 0.701", \
                          "0.530, 0.537, 0.545, 0.563, 0.597, 0.632, 0.657" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.772, 0.774, 0.777, 0.783, 0.796, 0.808, 0.818", \
                          "0.760, 0.763, 0.766, 0.772, 0.784, 0.797, 0.806", \
                          "0.746, 0.748, 0.751, 0.758, 0.770, 0.782, 0.792", \
                          "0.717, 0.719, 0.723, 0.729, 0.741, 0.754, 0.763", \
                          "0.659, 0.662, 0.665, 0.671, 0.684, 0.696, 0.705", \
                          "0.602, 0.604, 0.607, 0.614, 0.626, 0.638, 0.648", \
                          "0.559, 0.561, 0.564, 0.570, 0.583, 0.595, 0.605" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_wen_B:
                        rise_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
                        fall_constraint(CacheMem_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410", \
                          "0.410, 0.410, 0.410, 0.410, 0.410, 0.410, 0.410" \
                        )
                        }
ENDARCDATA


ARCDATA
period_clk_0_B:
                        rise_constraint(scalar) {
                                values ("1.422")
                        }
                        fall_constraint(scalar) {
                                values ("1.422")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_h_0_B:
                        rise_constraint(scalar) {
                                values ("0.088")
                        }
                        fall_constraint(scalar) {
                                values ("0.088")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_l_0_B:
                        rise_constraint(scalar) {
                                values ("0.117")
                        }
                        fall_constraint(scalar) {
                                values ("0.117")
                        }
ENDARCDATA
ARCDATA
dly_clk_q_0_B:
                        cell_rise(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "0.918, 0.941, 0.964, 1.009, 1.099, 1.254, 1.421", \
                          "0.930, 0.953, 0.975, 1.021, 1.111, 1.266, 1.432", \
                          "0.944, 0.967, 0.990, 1.035, 1.125, 1.280, 1.447", \
                          "0.973, 0.996, 1.018, 1.064, 1.154, 1.309, 1.475", \
                          "1.031, 1.053, 1.076, 1.121, 1.212, 1.367, 1.533", \
                          "1.088, 1.111, 1.134, 1.179, 1.269, 1.424, 1.591", \
                          "1.131, 1.154, 1.177, 1.222, 1.312, 1.468, 1.634" \
                        )
                        }
                        rise_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.022, 0.067, 0.113, 0.204, 0.446, 0.871, 1.326")
                        }
                        cell_fall(CacheMem_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ( \
                          "0.918, 0.941, 0.964, 1.009, 1.099, 1.254, 1.421", \
                          "0.930, 0.953, 0.975, 1.021, 1.111, 1.266, 1.432", \
                          "0.944, 0.967, 0.990, 1.035, 1.125, 1.280, 1.447", \
                          "0.973, 0.996, 1.018, 1.064, 1.154, 1.309, 1.475", \
                          "1.031, 1.053, 1.076, 1.121, 1.212, 1.367, 1.533", \
                          "1.088, 1.111, 1.134, 1.179, 1.269, 1.424, 1.591", \
                          "1.131, 1.154, 1.177, 1.222, 1.312, 1.468, 1.634" \
                        )
                        }
                        fall_transition(CacheMem_mem_out_slew_template) {
                        index_1 ("0.000, 0.030, 0.060, 0.120, 0.280, 0.560, 0.860");
                        values ("0.026, 0.058, 0.089, 0.151, 0.317, 0.608, 0.920")
                        }
ENDARCDATA
ARCDATA
cont_cc_A:
                        rise_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014" \
                        )
                        }
                        fall_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014" \
                        )
                        }
ENDARCDATA
ARCDATA
cont_cc_B:
                        rise_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014" \
                        )
                        }
                        fall_constraint(CacheMem_clk_setup_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.400, 0.600, 0.750");
                        values ( \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014", \
                          "1.014, 1.014, 1.014, 1.014, 1.014, 1.014, 1.014" \
                        )
                        }
ENDARCDATA
ENDTIMINGDATA
ENDMODELDATA
